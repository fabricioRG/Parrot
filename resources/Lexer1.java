/* The following code was generated by JFlex 1.6.1 */

package parrot.backend.analizadores;

import java_cup.runtime.*;
import static parrot.backend.analizadores.sym.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>AnalizadorLexico1.lex</tt>
 */
public class Lexer1 implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\0\1\72"+
    "\1\54\1\57\5\0\1\10\2\0\1\55\1\0\1\53\1\5\11\6"+
    "\2\0\1\67\1\71\1\70\2\0\1\12\1\14\1\16\1\62\1\20"+
    "\1\60\1\61\1\64\1\22\1\65\1\4\1\24\1\26\1\30\1\32"+
    "\1\34\1\36\1\40\1\42\1\44\1\46\1\50\1\66\1\52\1\4"+
    "\1\63\1\7\1\0\1\11\1\0\1\56\1\0\1\13\1\15\1\17"+
    "\1\4\1\21\3\4\1\23\2\4\1\25\1\27\1\31\1\33\1\35"+
    "\1\37\1\41\1\43\1\45\1\47\1\51\1\4\1\4\2\4\1\0"+
    "\1\73\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uff93\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\22\1\1\3\1\1\1\4\1\5"+
    "\1\6\1\7\1\10\5\0\1\11\23\0\1\12\17\0"+
    "\1\11\2\0\1\13\3\0\1\14\135\0\1\15\3\0"+
    "\1\16\1\17\11\0\1\20\1\21\1\22\2\0\1\23"+
    "\13\0\1\24\6\0\1\25\1\0\1\26\6\0\1\27"+
    "\2\0\1\30\1\0\1\31\1\32\15\0\1\33\17\0"+
    "\1\34\10\0\1\35\3\0\1\36\3\0\1\37\1\0"+
    "\1\40\4\0\2\41\15\0\1\42\2\0\1\43\1\44"+
    "\1\0\1\45\2\0\1\46\4\0\1\47\1\50\3\0"+
    "\1\51\2\0\1\52\1\53\1\54\6\0\1\55\7\0"+
    "\1\56\2\0\1\57\1\60\1\61\2\0\1\62\1\0"+
    "\1\63\13\0\1\64\3\0\1\65\6\0\1\66\7\0"+
    "\1\67\20\0\1\70\6\0\1\71\5\0\1\72\1\0"+
    "\1\73\1\74\3\0\1\75\3\0\1\76\2\0\1\77"+
    "\2\0\1\100\1\101";

  private static int [] zzUnpackAction() {
    int [] result = new int[423];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\74\0\264\0\360\0\u012c\0\u0168"+
    "\0\u01a4\0\u01e0\0\u021c\0\u0258\0\u0294\0\u02d0\0\u030c\0\u0348"+
    "\0\u0384\0\u03c0\0\u03fc\0\u0438\0\u0474\0\u04b0\0\u04ec\0\u0528"+
    "\0\74\0\74\0\74\0\74\0\74\0\u0564\0\u05a0\0\u05dc"+
    "\0\u0618\0\u0654\0\u0564\0\u0690\0\u06cc\0\u0708\0\u0744\0\u0780"+
    "\0\u07bc\0\u07f8\0\u0834\0\u0870\0\u08ac\0\u08e8\0\u0924\0\u0960"+
    "\0\u099c\0\u09d8\0\u0a14\0\u0a50\0\u0a8c\0\u0ac8\0\74\0\u0b04"+
    "\0\u0b40\0\u0b7c\0\u0bb8\0\u0bf4\0\u0c30\0\u0c6c\0\u0ca8\0\u0ce4"+
    "\0\u0d20\0\u0d5c\0\u0d98\0\u0dd4\0\u0e10\0\u0e4c\0\74\0\u0e88"+
    "\0\u0ec4\0\74\0\u0f00\0\u0f3c\0\u0f78\0\74\0\u0fb4\0\u0ff0"+
    "\0\u102c\0\u1068\0\u10a4\0\u10e0\0\u111c\0\u1158\0\u1194\0\u11d0"+
    "\0\u120c\0\u1248\0\u1284\0\u12c0\0\u12fc\0\u1338\0\u1374\0\u13b0"+
    "\0\u13ec\0\u1428\0\u1464\0\u14a0\0\u14dc\0\u1518\0\u1554\0\u1590"+
    "\0\u15cc\0\u1608\0\u1644\0\u1680\0\u16bc\0\u16f8\0\u1734\0\u1770"+
    "\0\u17ac\0\u17e8\0\u1824\0\u1860\0\u189c\0\u18d8\0\u1914\0\u1950"+
    "\0\u198c\0\u19c8\0\u1a04\0\u1a40\0\u1a7c\0\u1ab8\0\u1af4\0\u1b30"+
    "\0\u1b6c\0\u1ba8\0\u1be4\0\u1c20\0\u1c5c\0\u1c98\0\u1cd4\0\u1d10"+
    "\0\u1d4c\0\u1d88\0\u1dc4\0\u1e00\0\u1e3c\0\u1e78\0\u1eb4\0\u1ef0"+
    "\0\u1f2c\0\u1f68\0\u1fa4\0\u1fe0\0\u201c\0\u2058\0\u2094\0\u20d0"+
    "\0\u210c\0\u2148\0\u2184\0\u21c0\0\u21fc\0\u2238\0\u2274\0\u22b0"+
    "\0\u22ec\0\u2328\0\u2364\0\u23a0\0\u23dc\0\u2418\0\u2454\0\u2490"+
    "\0\u24cc\0\u2508\0\u2544\0\74\0\u2580\0\u25bc\0\u25f8\0\74"+
    "\0\74\0\u2634\0\u2670\0\u26ac\0\u26e8\0\u2724\0\u2760\0\u279c"+
    "\0\u27d8\0\u2814\0\74\0\74\0\74\0\u2850\0\u288c\0\74"+
    "\0\u28c8\0\u2904\0\u2940\0\u297c\0\u29b8\0\u29f4\0\u2a30\0\u2a6c"+
    "\0\u2aa8\0\u2ae4\0\u2b20\0\74\0\u2b5c\0\u2b98\0\u2bd4\0\u2c10"+
    "\0\u2c4c\0\u2c88\0\u2cc4\0\u2d00\0\74\0\u2d3c\0\u2d78\0\u2db4"+
    "\0\u2df0\0\u2e2c\0\u2e68\0\74\0\u2ea4\0\u2ee0\0\74\0\u2f1c"+
    "\0\74\0\74\0\u2f58\0\u2f94\0\u2fd0\0\u300c\0\u3048\0\u3084"+
    "\0\u30c0\0\u30fc\0\u3138\0\u3174\0\u31b0\0\u31ec\0\u3228\0\74"+
    "\0\u3264\0\u32a0\0\u32dc\0\u3318\0\u3354\0\u3390\0\u33cc\0\u3408"+
    "\0\u3444\0\u3480\0\u34bc\0\u34f8\0\u3534\0\u3570\0\u35ac\0\u35e8"+
    "\0\u3624\0\u3660\0\u369c\0\u36d8\0\u3714\0\u3750\0\u378c\0\u37c8"+
    "\0\74\0\u3804\0\u3840\0\u387c\0\74\0\u38b8\0\u38f4\0\u3930"+
    "\0\74\0\u396c\0\u39a8\0\u39e4\0\u3a20\0\u3a5c\0\u3a98\0\u3ad4"+
    "\0\u3b10\0\u3b4c\0\u3b88\0\u3bc4\0\u3c00\0\u3c3c\0\u3c78\0\u3cb4"+
    "\0\u3cf0\0\u3d2c\0\u3d68\0\u3da4\0\u3de0\0\u3e1c\0\74\0\u3e58"+
    "\0\u3e94\0\74\0\74\0\u3ed0\0\74\0\u3f0c\0\u3f48\0\74"+
    "\0\u3f84\0\u3fc0\0\u3ffc\0\u4038\0\74\0\74\0\u4074\0\u40b0"+
    "\0\u40ec\0\u4128\0\u4164\0\u41a0\0\74\0\u41dc\0\u4218\0\u4254"+
    "\0\u4290\0\u42cc\0\u4308\0\u4344\0\u4380\0\74\0\u43bc\0\u43f8"+
    "\0\u4434\0\u4470\0\u44ac\0\u44e8\0\u4524\0\74\0\u4560\0\u459c"+
    "\0\74\0\74\0\u45d8\0\u4614\0\u4650\0\74\0\u468c\0\74"+
    "\0\u46c8\0\u4704\0\u4740\0\u477c\0\u47b8\0\u47f4\0\u4830\0\u486c"+
    "\0\u48a8\0\u48e4\0\u4920\0\74\0\u495c\0\u4998\0\u49d4\0\74"+
    "\0\u4a10\0\u4a4c\0\u4a88\0\u4ac4\0\u4b00\0\u4b3c\0\74\0\u4b78"+
    "\0\u4bb4\0\u4bf0\0\u4c2c\0\u4c68\0\u4ca4\0\u4ce0\0\74\0\u4d1c"+
    "\0\u4d58\0\u4d94\0\u4dd0\0\u4e0c\0\u4e48\0\u4e84\0\u4ec0\0\u4efc"+
    "\0\u4f38\0\u4f74\0\u4fb0\0\u4fec\0\u5028\0\u5064\0\u50a0\0\74"+
    "\0\u50dc\0\u5118\0\u5154\0\u5190\0\u51cc\0\u5208\0\74\0\u5244"+
    "\0\u5280\0\u52bc\0\u52f8\0\u5334\0\74\0\u5370\0\74\0\74"+
    "\0\u53ac\0\u53e8\0\u5424\0\74\0\u5460\0\u549c\0\u54d8\0\74"+
    "\0\u5514\0\u5550\0\74\0\u558c\0\u55c8\0\74\0\74";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[423];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\3\2\1\5\2\2\1\6\1\7"+
    "\1\10\1\2\1\11\1\2\1\12\1\13\1\14\3\2"+
    "\1\15\1\2\1\16\1\17\1\20\1\2\1\21\1\22"+
    "\4\2\1\23\1\2\1\24\1\2\1\25\1\2\2\26"+
    "\1\2\1\27\4\2\1\30\6\2\1\31\1\32\1\33"+
    "\1\34\1\35\76\0\1\4\71\0\3\36\1\37\1\40"+
    "\1\41\1\42\1\36\1\0\1\43\4\40\1\44\3\40"+
    "\1\45\3\40\1\46\5\40\1\47\7\40\1\50\3\40"+
    "\1\51\2\40\1\36\1\52\3\36\2\40\1\53\2\40"+
    "\1\54\1\40\5\36\16\0\2\55\4\0\1\56\3\0"+
    "\1\57\13\0\2\60\13\0\1\61\30\0\2\55\24\0"+
    "\2\60\60\0\1\62\65\0\1\63\5\0\1\64\105\0"+
    "\1\65\1\66\72\0\2\66\110\0\1\67\43\0\1\70"+
    "\73\0\2\71\12\0\1\72\57\0\2\71\100\0\1\73"+
    "\45\0\1\74\1\75\72\0\2\75\102\0\1\76\71\0"+
    "\1\77\1\0\1\100\113\0\1\101\43\0\2\102\72\0"+
    "\2\103\4\0\2\104\12\0\2\105\56\0\1\106\53\0"+
    "\11\36\1\107\65\36\1\37\1\40\1\41\1\42\2\36"+
    "\1\107\4\40\1\44\3\40\1\45\3\40\1\46\5\40"+
    "\1\47\7\40\1\50\3\40\1\51\2\40\1\36\1\52"+
    "\3\36\2\40\1\53\2\40\1\54\1\40\10\36\1\110"+
    "\1\40\1\36\1\111\2\36\1\112\41\40\2\36\12\40"+
    "\12\36\2\113\2\36\1\107\65\36\1\114\1\36\2\115"+
    "\2\36\1\116\65\36\1\110\1\40\1\36\1\111\2\36"+
    "\1\112\6\40\1\117\32\40\2\36\12\40\10\36\1\110"+
    "\1\40\1\36\1\111\2\36\1\112\14\40\1\120\24\40"+
    "\2\36\6\40\1\121\3\40\10\36\1\110\1\40\1\36"+
    "\1\111\2\36\1\112\6\40\1\122\32\40\2\36\12\40"+
    "\10\36\1\110\1\40\1\36\1\111\2\36\1\112\1\123"+
    "\40\40\2\36\12\40\10\36\1\110\1\40\1\36\1\111"+
    "\2\36\1\112\10\40\1\124\30\40\2\36\12\40\10\36"+
    "\1\110\1\40\1\36\1\111\2\36\1\112\10\40\1\125"+
    "\30\40\2\36\12\40\11\36\3\126\2\36\1\107\41\126"+
    "\5\36\7\126\10\36\1\110\1\40\1\36\1\111\2\36"+
    "\1\112\6\40\1\127\32\40\2\36\12\40\10\36\1\110"+
    "\1\40\1\36\1\111\2\36\1\112\34\40\1\130\4\40"+
    "\2\36\12\40\5\36\16\0\2\131\76\0\1\132\21\0"+
    "\1\133\45\0\1\134\115\0\2\135\72\0\1\136\73\0"+
    "\1\137\45\0\1\140\105\0\1\141\71\0\1\142\1\143"+
    "\72\0\2\143\132\0\1\144\37\0\2\145\64\0\1\146"+
    "\75\0\1\147\111\0\2\150\17\0\1\151\1\152\51\0"+
    "\2\150\76\0\1\153\101\0\1\154\65\0\1\155\75\0"+
    "\1\156\51\0\2\157\64\0\2\160\24\0\2\161\72\0"+
    "\2\162\40\0\2\163\76\0\1\164\55\0\3\36\1\110"+
    "\5\36\1\112\65\36\1\110\1\40\2\111\2\36\1\112"+
    "\41\40\2\36\12\40\12\36\2\165\2\36\1\107\65\36"+
    "\1\114\5\36\1\116\65\36\1\114\1\36\2\166\2\36"+
    "\1\116\65\36\1\110\1\40\1\36\1\111\2\36\1\112"+
    "\16\40\1\167\22\40\2\36\12\40\10\36\1\110\1\40"+
    "\1\36\1\111\2\36\1\112\1\170\40\40\2\36\12\40"+
    "\10\36\1\110\1\40\1\36\1\111\2\36\1\112\24\40"+
    "\1\171\14\40\2\36\12\40\10\36\1\110\1\40\1\36"+
    "\1\111\2\36\1\112\16\40\1\172\22\40\2\36\12\40"+
    "\10\36\1\110\1\40\1\36\1\111\2\36\1\112\26\40"+
    "\1\173\12\40\2\36\12\40\10\36\1\110\1\40\1\36"+
    "\1\111\2\36\1\112\32\40\1\174\6\40\2\36\12\40"+
    "\10\36\1\110\1\40\1\36\1\111\2\36\1\112\41\40"+
    "\2\36\5\40\1\175\4\40\11\36\3\176\2\36\1\107"+
    "\41\176\5\36\7\176\10\36\1\110\1\40\1\36\1\111"+
    "\2\36\1\112\26\40\1\177\12\40\2\36\12\40\10\36"+
    "\1\110\1\40\1\36\1\111\2\36\1\112\30\40\1\200"+
    "\10\40\2\36\12\40\5\36\22\0\2\201\100\0\1\202"+
    "\111\0\1\203\111\0\1\204\31\0\2\205\70\0\1\206"+
    "\113\0\1\207\75\0\1\210\63\0\1\211\77\0\1\212"+
    "\1\213\72\0\2\213\56\0\1\214\65\0\2\215\126\0"+
    "\1\216\104\0\1\217\24\0\2\220\102\0\1\221\111\0"+
    "\1\222\55\0\1\223\115\0\1\224\75\0\1\225\37\0"+
    "\1\226\113\0\2\227\56\0\2\230\114\0\2\231\54\0"+
    "\2\232\110\0\2\233\116\0\1\234\7\0\5\36\2\235"+
    "\2\36\1\107\65\36\1\114\1\36\2\236\2\36\1\116"+
    "\65\36\1\110\1\40\1\36\1\111\2\36\1\112\32\40"+
    "\1\237\6\40\2\36\12\40\10\36\1\110\1\40\1\36"+
    "\1\111\2\36\1\112\41\40\2\36\4\40\1\240\5\40"+
    "\10\36\1\110\1\40\1\36\1\111\2\36\1\112\34\40"+
    "\1\241\4\40\2\36\12\40\10\36\1\110\1\40\1\36"+
    "\1\111\2\36\1\112\34\40\1\242\4\40\2\36\12\40"+
    "\10\36\1\110\1\40\1\36\1\111\2\36\1\112\26\40"+
    "\1\243\12\40\2\36\12\40\10\36\1\110\1\40\1\36"+
    "\1\111\2\36\1\112\34\40\1\244\4\40\2\36\12\40"+
    "\10\36\1\110\1\40\1\36\1\111\2\36\1\112\6\40"+
    "\1\245\32\40\2\36\12\40\11\36\3\246\2\36\1\107"+
    "\41\246\5\36\7\246\10\36\1\110\1\40\1\36\1\111"+
    "\2\36\1\112\6\40\1\247\32\40\2\36\12\40\10\36"+
    "\1\110\1\40\1\36\1\111\2\36\1\112\32\40\1\250"+
    "\6\40\2\36\12\40\5\36\32\0\2\251\60\0\1\252"+
    "\113\0\1\253\65\0\1\254\55\0\2\255\137\0\1\256"+
    "\24\0\1\257\101\0\1\260\113\0\1\261\101\0\1\262"+
    "\1\263\72\0\2\263\104\0\1\264\53\0\2\265\44\0"+
    "\1\266\17\0\1\267\61\0\1\270\101\0\2\271\74\0"+
    "\1\272\63\0\1\273\105\0\1\274\73\0\1\275\65\0"+
    "\1\276\107\0\1\277\73\0\2\300\54\0\2\301\72\0"+
    "\2\302\106\0\2\303\46\0\2\304\72\0\1\305\61\0"+
    "\11\36\1\107\43\36\1\306\21\36\1\114\1\36\2\307"+
    "\2\36\1\116\43\36\1\306\21\36\1\110\1\40\1\36"+
    "\1\111\2\36\1\112\26\40\1\310\12\40\2\36\12\40"+
    "\10\36\1\110\1\40\1\36\1\111\2\36\1\112\6\40"+
    "\1\311\32\40\2\36\12\40\10\36\1\110\1\40\1\36"+
    "\1\111\2\36\1\112\10\40\1\312\30\40\2\36\12\40"+
    "\10\36\1\313\1\40\1\36\1\111\2\36\1\314\41\40"+
    "\2\36\12\40\10\36\1\110\1\40\1\36\1\111\2\36"+
    "\1\112\1\315\40\40\2\36\12\40\10\36\1\110\1\40"+
    "\1\36\1\111\2\36\1\112\12\40\1\316\26\40\2\36"+
    "\12\40\10\36\1\110\1\40\1\36\1\111\2\36\1\112"+
    "\20\40\1\317\20\40\2\36\12\40\11\36\3\320\2\36"+
    "\1\107\41\320\5\36\7\320\10\36\1\110\1\40\1\36"+
    "\1\111\2\36\1\112\4\40\1\321\34\40\2\36\12\40"+
    "\10\36\1\110\1\40\1\36\1\111\2\36\1\112\10\40"+
    "\1\322\30\40\2\36\12\40\5\36\30\0\2\323\54\0"+
    "\1\324\73\0\1\325\127\0\2\326\36\0\1\327\121\0"+
    "\1\330\53\0\1\331\1\332\72\0\2\332\74\0\1\333"+
    "\71\0\2\334\130\0\1\335\73\0\1\336\45\0\1\337"+
    "\63\0\2\340\64\0\1\341\113\0\1\342\63\0\1\343"+
    "\103\0\2\344\54\0\2\345\124\0\2\346\52\0\2\347"+
    "\122\0\1\350\15\0\5\36\2\351\2\36\1\107\65\36"+
    "\1\114\1\36\2\307\2\36\1\116\65\36\1\110\1\40"+
    "\1\36\1\111\2\36\1\112\1\352\40\40\2\36\12\40"+
    "\10\36\1\110\1\40\1\36\1\111\2\36\1\112\16\40"+
    "\1\353\22\40\2\36\12\40\10\36\1\110\1\40\1\36"+
    "\1\111\2\36\1\112\6\40\1\354\32\40\2\36\12\40"+
    "\10\36\1\313\5\36\1\314\65\36\1\110\1\40\1\36"+
    "\1\111\2\36\1\112\41\40\2\36\3\40\1\355\6\40"+
    "\10\36\1\110\1\40\1\36\1\111\2\36\1\112\20\40"+
    "\1\356\20\40\2\36\12\40\10\36\1\357\1\40\1\36"+
    "\1\111\2\36\1\360\41\40\2\36\12\40\11\36\3\361"+
    "\2\36\1\107\41\361\5\36\7\361\10\36\1\110\1\40"+
    "\1\36\1\111\2\36\1\112\41\40\2\36\7\40\1\362"+
    "\2\40\10\36\1\110\1\40\1\36\1\111\2\36\1\112"+
    "\41\40\2\36\3\40\1\363\6\40\5\36\20\0\2\364"+
    "\70\0\1\365\121\0\2\366\66\0\1\367\111\0\1\370"+
    "\61\0\1\371\1\372\72\0\2\372\44\0\1\373\111\0"+
    "\1\374\101\0\1\375\75\0\2\376\60\0\1\377\71\0"+
    "\2\u0100\110\0\2\u0101\44\0\2\u0102\72\0\2\u0103\70\0"+
    "\1\u0104\7\0\1\u0105\45\0\5\36\2\u0106\2\36\1\107"+
    "\65\36\1\110\1\40\1\36\1\111\2\36\1\112\26\40"+
    "\1\u0107\12\40\2\36\12\40\10\36\1\u0108\1\40\1\36"+
    "\1\111\2\36\1\u0109\41\40\2\36\12\40\10\36\1\110"+
    "\1\40\1\36\1\111\2\36\1\112\26\40\1\u010a\12\40"+
    "\2\36\12\40\10\36\1\110\1\40\1\36\1\111\2\36"+
    "\1\112\20\40\1\u010b\20\40\2\36\12\40\10\36\1\u010c"+
    "\1\40\1\36\1\111\2\36\1\u010d\41\40\2\36\12\40"+
    "\10\36\1\357\5\36\1\360\66\36\3\u010e\2\36\1\107"+
    "\41\u010e\5\36\7\u010e\10\36\1\110\1\40\1\36\1\111"+
    "\2\36\1\112\1\u010f\40\40\2\36\12\40\10\36\1\110"+
    "\1\40\1\36\1\111\2\36\1\112\10\40\1\u0110\30\40"+
    "\2\36\12\40\5\36\42\0\2\u0111\52\0\1\u0112\103\0"+
    "\2\u0113\116\0\1\u0114\33\0\1\u0115\15\0\1\u0116\5\0"+
    "\1\u0117\43\0\1\u0118\1\u0119\72\0\2\u0119\72\0\1\u011a"+
    "\73\0\1\u011b\103\0\1\u011c\111\0\2\u011d\110\0\1\u011e"+
    "\35\0\2\u011f\116\0\2\u0120\72\0\2\u0121\72\0\2\u0122"+
    "\66\0\1\u0123\65\0\1\u0124\41\0\11\36\1\107\43\36"+
    "\1\u0125\21\36\1\u0126\1\40\1\36\1\111\2\36\1\u0127"+
    "\41\40\2\36\12\40\10\36\1\u0108\5\36\1\u0109\65\36"+
    "\1\110\1\40\1\36\1\111\2\36\1\112\41\40\2\36"+
    "\5\40\1\u0128\4\40\10\36\1\u0129\1\40\1\36\1\111"+
    "\2\36\1\u012a\41\40\2\36\12\40\10\36\1\u010c\5\36"+
    "\1\u010d\65\36\1\u010e\5\36\1\u012b\65\36\1\u012c\1\40"+
    "\1\36\1\111\2\36\1\u012d\41\40\2\36\12\40\10\36"+
    "\1\110\1\40\1\36\1\111\2\36\1\112\4\40\1\u012e"+
    "\34\40\2\36\12\40\5\36\32\0\1\u012f\103\0\2\u0130"+
    "\46\0\1\u0131\107\0\1\u0132\53\0\1\u0133\103\0\1\u0134"+
    "\113\0\1\u0135\1\u0136\72\0\2\u0136\70\0\1\u0137\114\0"+
    "\1\u0138\56\0\1\u0139\61\0\2\u013a\56\0\1\u013b\7\0"+
    "\1\u013c\107\0\2\u013d\62\0\2\u013e\52\0\2\u013f\120\0"+
    "\2\u0140\52\0\1\u0141\135\0\1\u0142\11\0\5\36\2\u0143"+
    "\2\36\1\107\65\36\1\u0126\5\36\1\u0127\65\36\1\110"+
    "\1\40\1\36\1\111\2\36\1\112\1\u0144\40\40\2\36"+
    "\12\40\10\36\1\u0129\5\36\1\u012a\65\36\1\u012c\5\36"+
    "\1\u012d\65\36\1\110\1\40\1\36\1\111\2\36\1\112"+
    "\1\u0145\40\40\2\36\12\40\5\36\30\0\1\u0146\75\0"+
    "\1\u0147\67\0\1\u0148\126\0\1\u0149\56\0\1\u014a\105\0"+
    "\1\u014b\37\0\1\u014c\73\0\1\u014d\113\0\2\u014e\70\0"+
    "\1\u014f\65\0\1\u0150\103\0\2\u0151\72\0\2\u0152\62\0"+
    "\2\u0153\52\0\1\u0154\103\0\1\u0155\51\0\3\36\1\u0143"+
    "\5\36\1\u0156\65\36\1\u0157\1\40\1\36\1\111\2\36"+
    "\1\u0158\41\40\2\36\12\40\10\36\1\110\1\40\1\36"+
    "\1\111\2\36\1\112\26\40\1\u0159\12\40\2\36\12\40"+
    "\5\36\26\0\1\u015a\101\0\1\u015b\61\0\1\u015c\73\0"+
    "\1\u015d\67\0\1\u015e\15\0\1\u015f\67\0\1\u0160\75\0"+
    "\1\u0161\61\0\1\u0162\135\0\1\u0163\53\0\2\u0164\46\0"+
    "\1\u0165\135\0\1\u0166\13\0\3\36\1\u0157\5\36\1\u0158"+
    "\65\36\1\u0167\1\40\1\36\1\111\2\36\1\u0168\41\40"+
    "\2\36\12\40\5\36\34\0\1\u0169\71\0\1\u016a\71\0"+
    "\1\u016b\75\0\1\u016c\73\0\1\u016d\53\0\1\u016e\73\0"+
    "\1\u016f\137\0\1\u0170\27\0\1\u0171\103\0\1\u0172\73\0"+
    "\1\u0173\73\0\1\u0174\51\0\3\36\1\u0167\5\36\1\u0168"+
    "\62\36\32\0\1\u0175\71\0\1\u0176\55\0\1\u0177\137\0"+
    "\1\u0178\43\0\1\u0179\126\0\1\u017a\100\0\1\u017b\23\0"+
    "\1\u017c\135\0\1\u017d\45\0\1\u017e\57\0\1\u017f\105\0"+
    "\1\u0180\63\0\1\u0181\141\0\1\u0182\41\0\1\u0183\61\0"+
    "\1\u0184\71\0\1\u0185\75\0\1\u0186\73\0\1\u0187\101\0"+
    "\1\u0188\55\0\1\u0189\101\0\1\u018a\103\0\1\u018b\63\0"+
    "\1\u018c\105\0\1\u018d\71\0\1\u018e\57\0\1\u018f\111\0"+
    "\1\u0190\57\0\1\u0191\73\0\1\u0192\105\0\1\u0193\107\0"+
    "\1\u0194\43\0\1\u0195\107\0\1\u0196\55\0\1\u0197\111\0"+
    "\1\u0198\55\0\1\u0199\103\0\1\u019a\115\0\1\u019b\47\0"+
    "\1\u019c\73\0\1\u019d\71\0\1\u019e\107\0\1\u019f\61\0"+
    "\1\u01a0\103\0\1\u01a1\65\0\1\u01a2\101\0\1\u01a3\107\0"+
    "\1\u01a4\61\0\1\u01a5\61\0\1\u01a6\103\0\1\u01a7\43\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[22020];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\24\1\5\11\5\0\1\1"+
    "\23\0\1\11\17\0\1\11\2\0\1\11\3\0\1\11"+
    "\135\0\1\11\3\0\2\11\11\0\3\11\2\0\1\11"+
    "\13\0\1\11\6\0\1\1\1\0\1\11\6\0\1\11"+
    "\2\0\1\11\1\0\2\11\15\0\1\11\17\0\1\1"+
    "\10\0\1\11\3\0\1\11\3\0\1\11\1\0\1\1"+
    "\4\0\2\1\15\0\1\11\2\0\2\11\1\0\1\11"+
    "\2\0\1\11\4\0\2\11\3\0\1\1\2\0\1\11"+
    "\2\1\6\0\1\11\7\0\1\11\2\0\2\11\1\1"+
    "\2\0\1\11\1\0\1\11\13\0\1\11\3\0\1\11"+
    "\6\0\1\11\7\0\1\11\20\0\1\11\6\0\1\11"+
    "\5\0\1\11\1\0\2\11\3\0\1\11\3\0\1\11"+
    "\2\0\1\11\2\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[423];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    StringBuilder string = new StringBuilder();
  
  private Symbol symbol(int type) {
    return new Symbol(type, yyline+1, yycolumn+1);
  }

  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline+1, yycolumn+1, value);
  }


  private void error(String message) {
    System.out.println("Error en linea line "+(yyline+1)+", columna "+(yycolumn+1)+" : "+message);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer1(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 196) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                return symbol(EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { error("Simbolo invalido <"+ yytext()+">");
            }
          case 66: break;
          case 2: 
            { /*Nothing to do*/
            }
          case 67: break;
          case 3: 
            { return symbol(SLASH, yytext());
            }
          case 68: break;
          case 4: 
            { return symbol(SIGNO_MENOR, yytext());
            }
          case 69: break;
          case 5: 
            { return symbol(SIGNO_MAYOR, yytext());
            }
          case 70: break;
          case 6: 
            { return symbol(SIGNO_IGUAL, yytext());
            }
          case 71: break;
          case 7: 
            { return symbol(COMILLAS, yytext());
            }
          case 72: break;
          case 8: 
            { return symbol(OR, yytext());
            }
          case 73: break;
          case 9: 
            { return symbol(TEXTO_PARAMETRO, yytext());
            }
          case 74: break;
          case 10: 
            { return symbol(ID_TEXTO, yytext());
            }
          case 75: break;
          case 11: 
            { return symbol(IDENTIFICADOR, yytext());
            }
          case 76: break;
          case 12: 
            { return symbol(ENTERO_PARAMETRO, yytext());
            }
          case 77: break;
          case 13: 
            { return symbol(ANCHO, yytext());
            }
          case 78: break;
          case 14: 
            { return symbol(CLASE, yytext());
            }
          case 79: break;
          case 15: 
            { return symbol(COLOR, yytext());
            }
          case 80: break;
          case 16: 
            { return symbol(PADRE, yytext());
            }
          case 81: break;
          case 17: 
            { return symbol(SITIO, yytext());
            }
          case 82: break;
          case 18: 
            { return symbol(TEXTO, yytext());
            }
          case 83: break;
          case 19: 
            { return symbol(VALOR, yytext());
            }
          case 84: break;
          case 20: 
            { return symbol(MENU_PARAMETRO, yytext());
            }
          case 85: break;
          case 21: 
            { return symbol(ACCION_ABIERTO, yytext());
            }
          case 86: break;
          case 22: 
            { return symbol(ALTURA, yytext());
            }
          case 87: break;
          case 23: 
            { return symbol(NOMBRE, yytext());
            }
          case 88: break;
          case 24: 
            { return symbol(ORIGEN, yytext());
            }
          case 89: break;
          case 25: 
            { return symbol(PAGINA, yytext());
            }
          case 90: break;
          case 26: 
            { return symbol(TITULO, yytext());
            }
          case 91: break;
          case 27: 
            { return symbol(VIDEO_PARAMETRO, yytext());
            }
          case 92: break;
          case 28: 
            { return symbol(ACCION_CERRADO, yytext());
            }
          case 93: break;
          case 29: 
            { return symbol(IMAGEN_PARAMETRO, yytext());
            }
          case 94: break;
          case 30: 
            { return symbol(TITULO_PARAMETRO, yytext());
            }
          case 95: break;
          case 31: 
            { return symbol(ACCIONES_ABIERTO, yytext());
            }
          case 96: break;
          case 32: 
            { return symbol(ATRIBUTO_ABIERTO, yytext());
            }
          case 97: break;
          case 33: 
            { return symbol(ETIQUETA_ABIERTO, yytext());
            }
          case 98: break;
          case 34: 
            { return symbol(CENTRAR_PARAMETRO, yytext());
            }
          case 99: break;
          case 35: 
            { return symbol(PARRAFO_PARAMETRO, yytext());
            }
          case 100: break;
          case 36: 
            { return symbol(HEXADECIMAL_PARAMETRO, yytext());
            }
          case 101: break;
          case 37: 
            { return symbol(DERECHA_PARAMETRO, yytext());
            }
          case 102: break;
          case 38: 
            { return symbol(ATRIBUTOS_ABIERTO, yytext());
            }
          case 103: break;
          case 39: 
            { return symbol(ETIQUETAS, yytext());
            }
          case 104: break;
          case 40: 
            { return symbol(ETIQUETAS_ABIERTO, yytext());
            }
          case 105: break;
          case 41: 
            { return symbol(PARAMETRO_ABIERTO, yytext());
            }
          case 106: break;
          case 42: 
            { return symbol(ACCIONES_CERRADO, yytext());
            }
          case 107: break;
          case 43: 
            { return symbol(ATRIBUTO_CERRADO, yytext());
            }
          case 108: break;
          case 44: 
            { return symbol(ETIQUETA_CERRADO, yytext());
            }
          case 109: break;
          case 45: 
            { return symbol(ALINEACION, yytext());
            }
          case 110: break;
          case 46: 
            { return symbol(PARAMETROS_ABIERTO, yytext());
            }
          case 111: break;
          case 47: 
            { return symbol(ATRIBUTOS_CERRADO, yytext());
            }
          case 112: break;
          case 48: 
            { return symbol(ETIQUETAS_CERRADO, yytext());
            }
          case 113: break;
          case 49: 
            { return symbol(PARAMETRO_CERRADO, yytext());
            }
          case 114: break;
          case 50: 
            { return symbol(FECHA_PARAMETRO, yytext());
            }
          case 115: break;
          case 51: 
            { return symbol(IZQUIERDA_PARAMETRO, yytext());
            }
          case 116: break;
          case 52: 
            { return symbol(PARAMETROS_CERRADO, yytext());
            }
          case 117: break;
          case 53: 
            { return symbol(JUSTIFICAR_PARAMETRO, yytext());
            }
          case 118: break;
          case 54: 
            { return symbol(NUEVA_PAGINA, yytext());
            }
          case 119: break;
          case 55: 
            { return symbol(BORRAR_PAGINA, yytext());
            }
          case 120: break;
          case 56: 
            { return symbol(FECHA_CREACION, yytext());
            }
          case 121: break;
          case 57: 
            { return symbol(NUEVO_SITIO_WEB, yytext());
            }
          case 122: break;
          case 58: 
            { return symbol(BORRAR_SITIO_WEB, yytext());
            }
          case 123: break;
          case 59: 
            { return symbol(MODIFICAR_PAGINA, yytext());
            }
          case 124: break;
          case 60: 
            { return symbol(USUARIO_CREACION, yytext());
            }
          case 125: break;
          case 61: 
            { return symbol(BORRAR_COMPONENTE, yytext());
            }
          case 126: break;
          case 62: 
            { return symbol(AGREGAR_COMPONENTE, yytext());
            }
          case 127: break;
          case 63: 
            { return symbol(FECHA_MODIFICACION, yytext());
            }
          case 128: break;
          case 64: 
            { return symbol(MODIFICAR_COMPONENTE, yytext());
            }
          case 129: break;
          case 65: 
            { return symbol(USUARIO_MODIFICACION, yytext());
            }
          case 130: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexer1 [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexer1 scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexer1(reader);
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
