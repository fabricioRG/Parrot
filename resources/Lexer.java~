/* The following code was generated by JFlex 1.6.1 */

package parrot.backend.analizadores;

import java_cup.runtime.*;
import static parrot.backend.analizadores.sym.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>AnalizadorLexico1.lex</tt>
 */
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\0\1\66"+
    "\1\51\1\52\10\0\1\52\1\0\1\0\1\6\11\5\2\0\1\63"+
    "\1\65\1\64\2\0\1\7\1\11\1\13\1\56\1\15\1\57\1\55"+
    "\1\60\1\17\1\62\1\4\1\21\1\23\1\25\1\27\1\31\1\33"+
    "\1\35\1\37\1\41\1\43\1\45\1\54\1\47\1\4\1\61\1\67"+
    "\1\0\1\70\1\0\1\53\1\0\1\10\1\12\1\14\1\4\1\16"+
    "\2\4\1\50\1\20\2\4\1\22\1\24\1\26\1\30\1\32\1\34"+
    "\1\36\1\40\1\42\1\44\1\46\1\4\1\4\2\4\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uff95\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\24\3\1\1\3\3\1\4\1\5"+
    "\1\6\1\7\1\10\1\11\14\3\1\12\17\3\2\13"+
    "\62\3\1\14\25\3\1\15\4\3\1\16\1\17\14\3"+
    "\1\20\1\21\1\3\1\22\2\3\1\23\1\24\3\3"+
    "\1\25\1\3\1\26\6\3\1\27\2\3\1\30\2\3"+
    "\1\31\2\3\1\32\3\3\1\33\11\3\1\34\7\3"+
    "\1\35\5\3\1\36\3\3\1\37\1\3\1\40\4\3"+
    "\2\41\16\3\1\42\4\3\1\43\1\44\1\45\3\3"+
    "\1\46\11\3\1\47\7\3\1\50\10\3\1\51\10\3"+
    "\1\52\15\3\1\53\13\3\1\54\4\3\1\55\1\56"+
    "\1\57\13\3\1\60\1\61\1\62\2\3\1\63\6\3"+
    "\1\64\1\65\5\3\1\66\1\3\1\67\1\70\3\3"+
    "\1\71\3\3\1\72\2\3\1\73\2\3\1\74\1\75";

  private static int [] zzUnpackAction() {
    int [] result = new int[369];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\71\0\253\0\344\0\u011d\0\u0156"+
    "\0\u018f\0\u01c8\0\u0201\0\u023a\0\u0273\0\u02ac\0\u02e5\0\u031e"+
    "\0\u0357\0\u0390\0\u03c9\0\u0402\0\u043b\0\u0474\0\u04ad\0\u04e6"+
    "\0\u051f\0\u0558\0\u0591\0\u05ca\0\71\0\71\0\71\0\71"+
    "\0\71\0\71\0\u0603\0\u063c\0\u0675\0\u06ae\0\u06e7\0\u0720"+
    "\0\u0759\0\u0792\0\u07cb\0\u0804\0\u083d\0\u0876\0\253\0\u08af"+
    "\0\u08e8\0\u0921\0\u095a\0\u0993\0\u09cc\0\u0a05\0\u0a3e\0\u0a77"+
    "\0\u0ab0\0\u0ae9\0\u0b22\0\u0b5b\0\u0b94\0\u0bcd\0\u051f\0\u0c06"+
    "\0\u0c3f\0\u0c78\0\u0cb1\0\u0cea\0\u0d23\0\u0d5c\0\u0d95\0\u0dce"+
    "\0\u0e07\0\u0e40\0\u0e79\0\u0eb2\0\u0eeb\0\u0f24\0\u0f5d\0\u0f96"+
    "\0\u0fcf\0\u1008\0\u1041\0\u107a\0\u10b3\0\u10ec\0\u1125\0\u115e"+
    "\0\u1197\0\u11d0\0\u1209\0\u1242\0\u127b\0\u12b4\0\u12ed\0\u1326"+
    "\0\u135f\0\u1398\0\u13d1\0\u140a\0\u1443\0\u147c\0\u14b5\0\u14ee"+
    "\0\u1527\0\u1560\0\u1599\0\u15d2\0\u160b\0\u1644\0\u167d\0\u16b6"+
    "\0\u16ef\0\u1728\0\253\0\u1761\0\u179a\0\u17d3\0\u180c\0\u1845"+
    "\0\u187e\0\u18b7\0\u18f0\0\u1929\0\u1962\0\u199b\0\u19d4\0\u1a0d"+
    "\0\u1a46\0\u1a7f\0\u1ab8\0\u1af1\0\u1b2a\0\u1b63\0\u1b9c\0\u1bd5"+
    "\0\253\0\u1c0e\0\u1c47\0\u1c80\0\u1cb9\0\253\0\253\0\u1cf2"+
    "\0\u1d2b\0\u1d64\0\u1d9d\0\u1dd6\0\u1e0f\0\u1e48\0\u1e81\0\u1eba"+
    "\0\u1ef3\0\u1f2c\0\u1f65\0\253\0\253\0\u1f9e\0\253\0\u1fd7"+
    "\0\u2010\0\253\0\253\0\u2049\0\u2082\0\u20bb\0\u20f4\0\u212d"+
    "\0\253\0\u2166\0\u219f\0\u21d8\0\u2211\0\u224a\0\u2283\0\253"+
    "\0\u22bc\0\u22f5\0\253\0\u232e\0\u2367\0\253\0\u23a0\0\u23d9"+
    "\0\253\0\u2412\0\u244b\0\u2484\0\253\0\u24bd\0\u24f6\0\u252f"+
    "\0\u2568\0\u25a1\0\u25da\0\u2613\0\u264c\0\u2685\0\253\0\u26be"+
    "\0\u26f7\0\u2730\0\u2769\0\u27a2\0\u27db\0\u2814\0\253\0\u284d"+
    "\0\u2886\0\u28bf\0\u28f8\0\u2931\0\253\0\u296a\0\u29a3\0\u29dc"+
    "\0\253\0\u2a15\0\u2a4e\0\u2a87\0\u2ac0\0\u2af9\0\u2b32\0\u2b6b"+
    "\0\u2ba4\0\u2bdd\0\u2c16\0\u2c4f\0\u2c88\0\u2cc1\0\u2cfa\0\u2d33"+
    "\0\u2d6c\0\u2da5\0\u2dde\0\u2e17\0\u2e50\0\u2e89\0\u2ec2\0\253"+
    "\0\u2efb\0\u2f34\0\u2f6d\0\u2fa6\0\253\0\253\0\253\0\u2fdf"+
    "\0\u3018\0\u3051\0\u308a\0\u30c3\0\u30fc\0\u3135\0\u316e\0\u31a7"+
    "\0\u31e0\0\u3219\0\u3252\0\u328b\0\253\0\u32c4\0\u32fd\0\u3336"+
    "\0\u336f\0\u33a8\0\u33e1\0\u341a\0\253\0\u3453\0\u348c\0\u34c5"+
    "\0\u34fe\0\u3537\0\u3570\0\u35a9\0\u35e2\0\253\0\u361b\0\u3654"+
    "\0\u368d\0\u36c6\0\u36ff\0\u3738\0\u3771\0\u37aa\0\u37e3\0\u381c"+
    "\0\u3855\0\u388e\0\u38c7\0\u3900\0\u3939\0\u3972\0\u39ab\0\u39e4"+
    "\0\u3a1d\0\u3a56\0\u3a8f\0\u3ac8\0\253\0\u3b01\0\u3b3a\0\u3b73"+
    "\0\u3bac\0\u3be5\0\u3c1e\0\u3c57\0\u3c90\0\u3cc9\0\u3d02\0\u3d3b"+
    "\0\253\0\u3d74\0\u3dad\0\u3de6\0\u3e1f\0\253\0\u3e58\0\u3e91"+
    "\0\u3eca\0\u3f03\0\u3f3c\0\u3f75\0\u3fae\0\u3fe7\0\u4020\0\u4059"+
    "\0\u4092\0\u40cb\0\u4104\0\253\0\253\0\u413d\0\u4176\0\u41af"+
    "\0\253\0\u41e8\0\u4221\0\u425a\0\u4293\0\u42cc\0\u4305\0\253"+
    "\0\253\0\u433e\0\u4377\0\u43b0\0\u43e9\0\u4422\0\253\0\u445b"+
    "\0\253\0\253\0\u4494\0\u44cd\0\u4506\0\253\0\u453f\0\u4578"+
    "\0\u45b1\0\253\0\u45ea\0\u4623\0\253\0\u465c\0\u4695\0\253"+
    "\0\253";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[369];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\1\6\1\2\1\7\1\10"+
    "\1\11\1\5\1\12\1\5\1\13\1\14\1\15\3\5"+
    "\1\16\1\5\1\17\1\20\1\21\1\5\1\22\1\23"+
    "\4\5\1\24\1\5\1\25\1\5\1\26\1\5\1\27"+
    "\1\30\2\5\1\31\2\2\2\5\1\32\1\33\2\5"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\73\0"+
    "\1\4\72\0\1\5\1\6\1\0\42\5\1\0\11\5"+
    "\12\0\1\5\2\6\42\5\1\0\11\5\12\0\1\5"+
    "\1\6\1\0\4\5\2\43\4\5\1\44\3\5\1\45"+
    "\13\5\2\46\6\5\1\0\3\5\1\47\5\5\12\0"+
    "\1\5\1\6\1\0\4\5\2\43\24\5\2\46\6\5"+
    "\1\0\11\5\12\0\1\5\1\6\1\0\20\5\1\50"+
    "\21\5\1\0\11\5\12\0\1\5\1\6\1\0\6\5"+
    "\1\51\3\5\1\52\5\5\1\53\21\5\1\0\11\5"+
    "\12\0\1\5\1\6\1\0\32\5\1\54\1\55\6\5"+
    "\1\0\11\5\12\0\1\5\1\6\1\0\32\5\2\55"+
    "\6\5\1\0\11\5\12\0\1\5\1\6\1\0\14\5"+
    "\1\56\25\5\1\0\4\5\1\57\2\5\1\60\1\5"+
    "\12\0\1\5\1\6\1\0\6\5\1\61\11\5\1\62"+
    "\21\5\1\0\11\5\12\0\1\5\1\6\1\0\20\5"+
    "\2\63\12\5\1\64\5\5\1\0\11\5\12\0\1\5"+
    "\1\6\1\0\20\5\2\63\20\5\1\0\11\5\12\0"+
    "\1\5\1\6\1\0\26\5\1\65\13\5\1\0\11\5"+
    "\12\0\1\5\1\6\1\0\1\66\1\67\40\5\1\0"+
    "\11\5\12\0\1\5\1\6\1\0\2\67\40\5\1\0"+
    "\11\5\12\0\1\5\1\6\1\0\10\5\1\70\2\5"+
    "\1\71\26\5\1\0\11\5\12\0\1\5\1\6\1\0"+
    "\6\5\1\72\1\5\1\73\31\5\1\0\11\5\12\0"+
    "\1\5\1\6\1\0\30\5\1\74\11\5\1\0\11\5"+
    "\12\0\1\5\1\6\1\0\2\75\6\5\1\76\31\5"+
    "\1\0\11\5\12\0\1\5\1\6\1\0\2\75\40\5"+
    "\1\0\11\5\12\0\1\77\1\100\1\0\42\77\3\0"+
    "\7\77\12\0\1\5\1\6\1\0\6\5\1\101\33\5"+
    "\1\0\11\5\12\0\1\5\1\6\1\0\6\5\1\102"+
    "\33\5\1\0\11\5\12\0\1\5\1\6\1\0\34\5"+
    "\1\103\5\5\1\0\11\5\12\0\1\5\1\6\1\0"+
    "\4\5\2\104\34\5\1\0\11\5\12\0\1\5\1\6"+
    "\1\0\10\5\1\105\21\5\1\106\7\5\1\0\11\5"+
    "\12\0\1\5\1\6\1\0\4\5\1\107\35\5\1\0"+
    "\11\5\12\0\1\5\1\6\1\0\26\5\2\110\12\5"+
    "\1\0\11\5\12\0\1\5\1\6\1\0\26\5\1\111"+
    "\13\5\1\0\11\5\12\0\1\5\1\6\1\0\26\5"+
    "\1\112\13\5\1\0\11\5\12\0\1\5\1\6\1\0"+
    "\16\5\1\113\23\5\1\0\11\5\12\0\1\5\1\6"+
    "\1\0\1\114\41\5\1\0\11\5\12\0\1\5\1\6"+
    "\1\0\12\5\1\115\27\5\1\0\11\5\12\0\1\5"+
    "\1\6\1\0\10\5\1\116\1\117\30\5\1\0\11\5"+
    "\12\0\1\5\1\6\1\0\10\5\2\117\30\5\1\0"+
    "\11\5\12\0\1\5\1\6\1\0\1\120\41\5\1\0"+
    "\11\5\12\0\1\5\1\6\1\0\24\5\1\121\15\5"+
    "\1\0\11\5\12\0\1\5\1\6\1\0\16\5\1\122"+
    "\23\5\1\0\11\5\12\0\1\5\1\6\1\0\42\5"+
    "\1\0\4\5\1\123\4\5\12\0\1\5\1\6\1\0"+
    "\14\5\2\124\24\5\1\0\11\5\12\0\1\5\1\6"+
    "\1\0\6\5\1\125\33\5\1\0\11\5\12\0\1\5"+
    "\1\6\1\0\10\5\1\126\31\5\1\0\11\5\12\0"+
    "\1\5\1\6\1\0\26\5\1\127\1\130\12\5\1\0"+
    "\3\5\1\131\1\132\4\5\12\0\1\5\1\6\1\0"+
    "\26\5\2\130\12\5\1\0\11\5\12\0\1\5\1\6"+
    "\1\0\32\5\1\133\7\5\1\0\11\5\12\0\1\5"+
    "\1\6\1\0\1\5\1\134\40\5\1\0\11\5\12\0"+
    "\1\5\1\6\1\0\40\5\1\135\1\5\1\0\11\5"+
    "\12\0\1\5\1\6\1\0\32\5\1\136\7\5\1\0"+
    "\11\5\12\0\1\5\1\6\1\0\34\5\1\137\5\5"+
    "\1\0\11\5\12\0\1\5\1\6\1\0\12\5\2\140"+
    "\26\5\1\0\11\5\12\0\1\5\1\6\1\0\42\5"+
    "\1\0\4\5\1\141\4\5\12\0\1\77\2\100\42\77"+
    "\3\0\7\77\12\0\1\5\1\6\1\0\26\5\1\142"+
    "\13\5\1\0\11\5\12\0\1\5\1\6\1\0\4\5"+
    "\1\143\35\5\1\0\11\5\12\0\1\5\1\6\1\0"+
    "\30\5\1\144\11\5\1\0\11\5\12\0\1\5\1\6"+
    "\1\0\10\5\2\145\30\5\1\0\11\5\12\0\1\5"+
    "\1\6\1\0\16\5\1\146\23\5\1\0\11\5\12\0"+
    "\1\5\1\6\1\0\34\5\1\147\5\5\1\0\11\5"+
    "\12\0\1\5\1\6\1\0\42\5\1\0\6\5\1\150"+
    "\2\5\12\0\1\5\1\6\1\0\10\5\2\151\30\5"+
    "\1\0\11\5\12\0\1\5\1\6\1\0\6\5\1\152"+
    "\33\5\1\0\11\5\12\0\1\5\1\6\1\0\26\5"+
    "\1\153\13\5\1\0\11\5\12\0\1\5\1\6\1\0"+
    "\32\5\1\154\7\5\1\0\11\5\12\0\1\5\1\6"+
    "\1\0\30\5\1\155\11\5\1\0\11\5\12\0\1\5"+
    "\1\6\1\0\20\5\1\156\21\5\1\0\11\5\12\0"+
    "\1\5\1\6\1\0\24\5\1\157\1\160\14\5\1\0"+
    "\11\5\12\0\1\5\1\6\1\0\24\5\2\160\14\5"+
    "\1\0\11\5\12\0\1\5\1\6\1\0\42\5\1\0"+
    "\3\5\1\161\5\5\12\0\1\5\1\6\1\0\34\5"+
    "\1\162\5\5\1\0\11\5\12\0\1\5\1\6\1\0"+
    "\34\5\1\163\5\5\1\0\11\5\12\0\1\5\1\6"+
    "\1\0\10\5\1\164\31\5\1\0\11\5\12\0\1\5"+
    "\1\6\1\0\2\5\2\165\36\5\1\0\11\5\12\0"+
    "\1\5\1\6\1\0\36\5\1\166\3\5\1\0\11\5"+
    "\12\0\1\5\1\6\1\0\42\5\1\0\3\5\1\167"+
    "\5\5\12\0\1\5\1\6\1\0\2\170\24\5\1\171"+
    "\13\5\1\0\11\5\12\0\1\5\1\6\1\0\2\170"+
    "\40\5\1\0\11\5\12\0\1\5\1\6\1\0\10\5"+
    "\1\172\31\5\1\0\11\5\12\0\1\5\1\6\1\0"+
    "\26\5\1\173\13\5\1\0\11\5\12\0\1\5\1\6"+
    "\1\0\10\5\1\174\31\5\1\0\11\5\12\0\1\5"+
    "\1\6\1\0\31\5\1\175\10\5\1\0\11\5\12\0"+
    "\1\5\1\6\1\0\32\5\1\176\7\5\1\0\11\5"+
    "\12\0\1\5\1\6\1\0\34\5\1\177\5\5\1\0"+
    "\11\5\12\0\1\5\1\6\1\0\1\200\41\5\1\0"+
    "\11\5\12\0\1\5\1\6\1\0\20\5\2\201\20\5"+
    "\1\0\11\5\12\0\1\5\1\6\1\0\6\5\1\202"+
    "\33\5\1\0\11\5\12\0\1\5\1\6\1\0\6\5"+
    "\1\203\33\5\1\0\11\5\12\0\1\5\1\6\1\0"+
    "\42\5\1\0\6\5\1\204\2\5\12\0\1\5\1\6"+
    "\1\0\32\5\1\205\7\5\1\0\11\5\12\0\1\5"+
    "\1\6\1\0\20\5\2\206\20\5\1\0\11\5\12\0"+
    "\1\5\1\6\1\0\6\5\1\207\33\5\1\0\11\5"+
    "\12\0\1\5\1\6\1\0\26\5\1\210\13\5\1\0"+
    "\11\5\12\0\1\5\1\6\1\0\20\5\1\211\21\5"+
    "\1\0\11\5\12\0\1\5\1\6\1\0\2\5\2\212"+
    "\36\5\1\0\11\5\12\0\1\5\1\6\1\0\42\5"+
    "\1\0\3\5\1\213\5\5\12\0\1\5\1\6\1\0"+
    "\1\214\41\5\1\0\11\5\12\0\1\5\1\6\1\0"+
    "\26\5\1\215\13\5\1\0\11\5\12\0\1\5\1\6"+
    "\1\0\6\5\1\216\33\5\1\0\11\5\12\0\1\5"+
    "\1\6\1\0\26\5\1\217\13\5\1\0\11\5\12\0"+
    "\1\5\1\6\1\0\34\5\1\220\1\221\4\5\1\0"+
    "\11\5\12\0\1\5\1\6\1\0\34\5\2\221\4\5"+
    "\1\0\11\5\12\0\1\5\1\6\1\0\6\5\1\222"+
    "\33\5\1\0\11\5\12\0\1\5\1\6\1\0\10\5"+
    "\1\223\31\5\1\0\11\5\12\0\1\5\1\6\1\0"+
    "\42\5\1\0\5\5\1\224\3\5\12\0\1\5\1\6"+
    "\1\0\26\5\2\225\12\5\1\0\11\5\12\0\1\5"+
    "\1\6\1\0\1\226\17\5\1\227\21\5\1\0\11\5"+
    "\12\0\1\5\1\6\1\0\6\5\1\230\33\5\1\0"+
    "\11\5\12\0\1\5\1\6\1\0\14\5\2\231\24\5"+
    "\1\0\11\5\12\0\1\5\1\6\1\0\1\232\41\5"+
    "\1\0\11\5\12\0\1\5\1\6\1\0\16\5\1\233"+
    "\23\5\1\0\11\5\12\0\1\5\1\6\1\0\6\5"+
    "\1\234\33\5\1\0\11\5\12\0\1\5\1\6\1\0"+
    "\20\5\1\235\21\5\1\0\11\5\12\0\1\5\1\6"+
    "\1\0\41\5\1\236\1\0\11\5\12\0\1\5\1\6"+
    "\1\0\20\5\1\237\21\5\1\0\11\5\12\0\1\5"+
    "\1\6\1\0\12\5\1\240\27\5\1\0\11\5\12\0"+
    "\1\5\1\6\1\0\26\5\1\241\13\5\1\0\11\5"+
    "\12\0\1\5\1\6\1\0\26\5\2\242\12\5\1\0"+
    "\11\5\12\0\1\5\1\6\1\0\20\5\1\243\21\5"+
    "\1\0\11\5\12\0\1\5\1\6\1\0\4\5\1\244"+
    "\35\5\1\0\11\5\12\0\1\5\1\6\1\0\1\245"+
    "\41\5\1\0\11\5\12\0\1\5\1\6\1\0\10\5"+
    "\1\246\31\5\1\0\11\5\12\0\1\5\1\6\1\0"+
    "\16\5\2\247\22\5\1\0\11\5\12\0\1\5\1\6"+
    "\1\0\1\250\41\5\1\0\11\5\12\0\1\5\1\6"+
    "\1\0\1\251\41\5\1\0\11\5\12\0\1\5\1\6"+
    "\1\0\34\5\2\252\4\5\1\0\11\5\12\0\1\5"+
    "\1\6\1\0\1\253\41\5\1\0\11\5\12\0\1\5"+
    "\1\6\1\0\26\5\1\254\13\5\1\0\11\5\12\0"+
    "\1\5\1\6\1\0\1\255\41\5\1\0\11\5\12\0"+
    "\1\5\1\6\1\0\6\5\1\256\1\257\32\5\1\0"+
    "\11\5\12\0\1\5\1\6\1\0\6\5\2\257\32\5"+
    "\1\0\11\5\12\0\1\5\1\6\1\0\16\5\1\260"+
    "\23\5\1\0\11\5\12\0\1\5\1\6\1\0\6\5"+
    "\1\261\33\5\1\0\11\5\12\0\1\5\1\6\1\0"+
    "\10\5\1\262\31\5\1\0\11\5\12\0\1\5\1\6"+
    "\1\0\6\5\2\263\32\5\1\0\11\5\12\0\1\5"+
    "\1\6\1\0\42\5\1\0\1\5\1\264\7\5\12\0"+
    "\1\5\1\6\1\0\42\5\1\0\1\5\1\265\7\5"+
    "\12\0\1\5\1\6\1\0\16\5\1\266\23\5\1\0"+
    "\11\5\12\0\1\5\1\6\1\0\6\5\2\267\32\5"+
    "\1\0\11\5\12\0\1\5\1\6\1\0\42\5\1\0"+
    "\5\5\1\270\3\5\12\0\1\5\1\6\1\0\1\271"+
    "\41\5\1\0\11\5\12\0\1\5\1\6\1\0\1\272"+
    "\5\5\1\273\13\5\1\274\17\5\1\0\11\5\12\0"+
    "\1\5\1\6\1\0\20\5\1\275\21\5\1\0\11\5"+
    "\12\0\1\5\1\6\1\0\10\5\1\276\31\5\1\0"+
    "\11\5\12\0\1\5\1\6\1\0\42\5\1\0\6\5"+
    "\1\277\2\5\12\0\1\5\1\6\1\0\42\5\1\0"+
    "\1\5\1\300\7\5\12\0\1\5\1\6\1\0\42\5"+
    "\1\0\5\5\1\301\3\5\12\0\1\5\1\6\1\0"+
    "\6\5\2\302\32\5\1\0\11\5\12\0\1\5\1\6"+
    "\1\0\4\5\1\303\35\5\1\0\11\5\12\0\1\5"+
    "\1\6\1\0\32\5\2\304\6\5\1\0\11\5\12\0"+
    "\1\5\1\6\1\0\26\5\1\305\13\5\1\0\11\5"+
    "\12\0\1\5\1\6\1\0\42\5\1\0\1\5\1\306"+
    "\7\5\12\0\1\5\1\6\1\0\26\5\1\307\13\5"+
    "\1\0\11\5\12\0\1\5\1\6\1\0\32\5\1\310"+
    "\1\311\6\5\1\0\11\5\12\0\1\5\1\6\1\0"+
    "\32\5\2\311\6\5\1\0\11\5\12\0\1\5\1\6"+
    "\1\0\26\5\1\312\13\5\1\0\11\5\12\0\1\5"+
    "\1\6\1\0\4\5\1\313\35\5\1\0\11\5\12\0"+
    "\1\5\1\6\1\0\22\5\1\314\17\5\1\0\11\5"+
    "\12\0\1\5\1\6\1\0\30\5\1\315\11\5\1\0"+
    "\11\5\12\0\1\5\1\6\1\0\32\5\2\316\6\5"+
    "\1\0\11\5\12\0\1\5\1\6\1\0\20\5\1\317"+
    "\21\5\1\0\11\5\12\0\1\5\1\6\1\0\5\5"+
    "\1\320\25\5\1\321\6\5\1\0\11\5\12\0\1\5"+
    "\1\6\1\0\33\5\1\322\6\5\1\0\11\5\12\0"+
    "\1\5\1\6\1\0\1\5\1\323\40\5\1\0\11\5"+
    "\12\0\1\5\1\6\1\0\20\5\1\324\21\5\1\0"+
    "\11\5\12\0\1\5\1\6\1\0\1\325\41\5\1\0"+
    "\11\5\12\0\1\5\1\6\1\0\4\5\1\326\7\5"+
    "\1\327\25\5\1\0\11\5\12\0\1\5\1\6\1\0"+
    "\10\5\1\330\31\5\1\0\11\5\12\0\1\5\1\6"+
    "\1\0\30\5\2\331\10\5\1\0\11\5\12\0\1\5"+
    "\1\6\1\0\10\5\1\332\31\5\1\0\11\5\12\0"+
    "\1\5\1\6\1\0\20\5\2\333\20\5\1\0\11\5"+
    "\12\0\1\5\1\6\1\0\42\5\1\0\1\5\1\334"+
    "\7\5\12\0\1\5\1\6\1\0\4\5\1\335\15\5"+
    "\1\336\5\5\1\337\11\5\1\0\11\5\12\0\1\5"+
    "\1\6\1\0\1\340\1\341\40\5\1\0\11\5\12\0"+
    "\1\5\1\6\1\0\2\341\40\5\1\0\11\5\12\0"+
    "\1\5\1\6\1\0\42\5\1\0\4\5\1\342\4\5"+
    "\12\0\1\5\1\6\1\0\1\343\41\5\1\0\11\5"+
    "\12\0\1\5\1\6\1\0\1\344\41\5\1\0\11\5"+
    "\12\0\1\5\1\6\1\0\10\5\1\345\31\5\1\0"+
    "\11\5\12\0\1\5\1\6\1\0\26\5\2\346\12\5"+
    "\1\0\11\5\12\0\1\5\1\6\1\0\5\5\1\347"+
    "\34\5\1\0\11\5\12\0\1\5\1\6\1\0\27\5"+
    "\1\350\12\5\1\0\11\5\12\0\1\5\1\6\1\0"+
    "\11\5\1\351\30\5\1\0\11\5\12\0\1\5\1\6"+
    "\1\0\27\5\1\352\12\5\1\0\11\5\12\0\1\5"+
    "\1\6\1\0\42\5\1\0\1\5\1\353\7\5\12\0"+
    "\1\5\1\6\1\0\26\5\1\354\13\5\1\0\11\5"+
    "\12\0\1\5\1\6\1\0\20\5\1\355\21\5\1\0"+
    "\11\5\12\0\1\5\1\6\1\0\4\5\1\356\35\5"+
    "\1\0\11\5\12\0\1\5\1\6\1\0\20\5\1\357"+
    "\21\5\1\0\11\5\12\0\1\5\1\6\1\0\30\5"+
    "\2\360\10\5\1\0\11\5\12\0\1\5\1\6\1\0"+
    "\4\5\1\361\35\5\1\0\11\5\12\0\1\5\1\6"+
    "\1\0\20\5\1\362\21\5\1\0\11\5\12\0\1\5"+
    "\1\6\1\0\1\363\41\5\1\0\11\5\12\0\1\5"+
    "\1\6\1\0\10\5\1\364\31\5\1\0\11\5\12\0"+
    "\1\5\1\6\1\0\30\5\1\365\1\366\10\5\1\0"+
    "\11\5\12\0\1\5\1\6\1\0\30\5\2\366\10\5"+
    "\1\0\11\5\12\0\1\5\1\6\1\0\1\367\41\5"+
    "\1\0\11\5\12\0\1\5\1\6\1\0\26\5\1\370"+
    "\13\5\1\0\11\5\12\0\1\5\1\6\1\0\42\5"+
    "\1\0\3\5\1\371\5\5\12\0\1\5\1\6\1\0"+
    "\32\5\1\372\7\5\1\0\11\5\12\0\1\5\1\6"+
    "\1\0\20\5\2\373\20\5\1\0\11\5\12\0\1\5"+
    "\1\6\1\0\11\5\1\374\30\5\1\0\11\5\12\0"+
    "\1\5\1\6\1\0\11\5\1\375\30\5\1\0\11\5"+
    "\12\0\1\5\1\6\1\0\25\5\1\376\14\5\1\0"+
    "\11\5\12\0\1\5\1\6\1\0\1\5\1\377\40\5"+
    "\1\0\11\5\12\0\1\5\1\6\1\0\4\5\1\u0100"+
    "\7\5\1\u0101\25\5\1\0\11\5\12\0\1\5\1\6"+
    "\1\0\6\5\1\u0102\33\5\1\0\11\5\12\0\1\5"+
    "\1\6\1\0\42\5\1\0\4\5\1\u0103\4\5\12\0"+
    "\1\5\1\6\1\0\1\u0104\41\5\1\0\11\5\12\0"+
    "\1\5\1\6\1\0\16\5\1\u0105\23\5\1\0\11\5"+
    "\12\0\1\5\1\6\1\0\20\5\1\u0106\21\5\1\0"+
    "\11\5\12\0\1\5\1\6\1\0\14\5\1\u0107\25\5"+
    "\1\0\11\5\12\0\1\5\1\6\1\0\42\5\1\0"+
    "\3\5\1\u0108\5\5\12\0\1\5\1\6\1\0\32\5"+
    "\1\u0109\7\5\1\0\11\5\12\0\1\5\1\6\1\0"+
    "\42\5\1\0\1\5\1\u010a\7\5\12\0\1\5\1\6"+
    "\1\0\10\5\1\u010b\31\5\1\0\11\5\12\0\1\5"+
    "\1\6\1\0\10\5\1\u010c\31\5\1\0\11\5\12\0"+
    "\1\5\1\6\1\0\30\5\2\u010d\10\5\1\0\11\5"+
    "\12\0\1\5\1\6\1\0\21\5\1\u010e\20\5\1\0"+
    "\11\5\12\0\1\5\1\6\1\0\3\5\1\u010f\36\5"+
    "\1\0\11\5\12\0\1\5\1\6\1\0\35\5\1\u0110"+
    "\4\5\1\0\11\5\12\0\1\5\1\6\1\0\15\5"+
    "\1\u0111\24\5\1\0\11\5\12\0\1\5\1\6\1\0"+
    "\26\5\1\u0112\13\5\1\0\11\5\12\0\1\5\1\6"+
    "\1\0\20\5\1\u0113\21\5\1\0\11\5\12\0\1\5"+
    "\1\6\1\0\1\u0114\41\5\1\0\11\5\12\0\1\5"+
    "\1\6\1\0\10\5\1\u0115\31\5\1\0\11\5\12\0"+
    "\1\5\1\6\1\0\26\5\1\u0116\13\5\1\0\11\5"+
    "\12\0\1\5\1\6\1\0\14\5\1\u0117\25\5\1\0"+
    "\11\5\12\0\1\5\1\6\1\0\22\5\1\u0118\17\5"+
    "\1\0\11\5\12\0\1\5\1\6\1\0\10\5\1\u0119"+
    "\31\5\1\0\11\5\12\0\1\5\1\6\1\0\10\5"+
    "\1\u011a\31\5\1\0\11\5\12\0\1\5\1\6\1\0"+
    "\4\5\1\u011b\15\5\1\u011c\17\5\1\0\11\5\12\0"+
    "\1\5\1\6\1\0\16\5\1\u011d\23\5\1\0\11\5"+
    "\12\0\1\5\1\6\1\0\20\5\1\u011e\21\5\1\0"+
    "\11\5\12\0\1\5\1\6\1\0\17\5\1\u011f\22\5"+
    "\1\0\11\5\12\0\1\5\1\6\1\0\35\5\1\u0120"+
    "\4\5\1\0\11\5\12\0\1\5\1\6\1\0\7\5"+
    "\1\u0121\32\5\1\0\11\5\12\0\1\5\1\6\1\0"+
    "\7\5\1\u0122\32\5\1\0\11\5\12\0\1\5\1\6"+
    "\1\0\6\5\1\u0123\33\5\1\0\11\5\12\0\1\5"+
    "\1\6\1\0\42\5\1\0\4\5\1\u0124\4\5\12\0"+
    "\1\5\1\6\1\0\4\5\1\u0125\35\5\1\0\11\5"+
    "\12\0\1\5\1\6\1\0\42\5\1\0\5\5\1\u0126"+
    "\3\5\12\0\1\5\1\6\1\0\22\5\1\u0127\17\5"+
    "\1\0\11\5\12\0\1\5\1\6\1\0\20\5\1\u0128"+
    "\21\5\1\0\11\5\12\0\1\5\1\6\1\0\16\5"+
    "\1\u0129\23\5\1\0\11\5\12\0\1\5\1\6\1\0"+
    "\20\5\1\u012a\21\5\1\0\11\5\12\0\1\5\1\6"+
    "\1\0\20\5\1\u012b\21\5\1\0\11\5\12\0\1\5"+
    "\1\6\1\0\1\u012c\41\5\1\0\11\5\12\0\1\5"+
    "\1\6\1\0\1\u012d\41\5\1\0\11\5\12\0\1\5"+
    "\1\6\1\0\42\5\1\0\1\5\1\u012e\7\5\12\0"+
    "\1\5\1\6\1\0\7\5\1\u012f\32\5\1\0\11\5"+
    "\12\0\1\5\1\6\1\0\33\5\1\u0130\6\5\1\0"+
    "\11\5\12\0\1\5\1\6\1\0\33\5\1\u0131\6\5"+
    "\1\0\11\5\12\0\1\5\1\6\1\0\33\5\1\u0132"+
    "\6\5\1\0\11\5\12\0\1\5\1\6\1\0\1\u0133"+
    "\41\5\1\0\11\5\12\0\1\5\1\6\1\0\10\5"+
    "\1\u0134\31\5\1\0\11\5\12\0\1\5\1\6\1\0"+
    "\10\5\1\u0135\31\5\1\0\11\5\12\0\1\5\1\6"+
    "\1\0\10\5\1\u0136\31\5\1\0\11\5\12\0\1\5"+
    "\1\6\1\0\20\5\1\u0137\21\5\1\0\11\5\12\0"+
    "\1\5\1\6\1\0\16\5\1\u0138\23\5\1\0\11\5"+
    "\12\0\1\5\1\6\1\0\1\u0139\41\5\1\0\11\5"+
    "\12\0\1\5\1\6\1\0\42\5\1\0\1\5\1\u013a"+
    "\7\5\12\0\1\5\1\6\1\0\14\5\1\u013b\25\5"+
    "\1\0\11\5\12\0\1\5\1\6\1\0\42\5\1\0"+
    "\3\5\1\u013c\5\5\12\0\1\5\1\6\1\0\42\5"+
    "\1\0\2\5\1\u013d\6\5\12\0\1\5\1\6\1\0"+
    "\31\5\1\u013e\10\5\1\0\11\5\12\0\1\5\1\6"+
    "\1\0\21\5\1\u013f\20\5\1\0\11\5\12\0\1\5"+
    "\1\6\1\0\1\5\1\u0140\40\5\1\0\11\5\12\0"+
    "\1\5\1\6\1\0\27\5\1\u0141\12\5\1\0\11\5"+
    "\12\0\1\5\1\6\1\0\4\5\1\u0142\35\5\1\0"+
    "\11\5\12\0\1\5\1\6\1\0\42\5\1\0\5\5"+
    "\1\u0143\3\5\12\0\1\5\1\6\1\0\20\5\1\u0144"+
    "\21\5\1\0\11\5\12\0\1\5\1\6\1\0\4\5"+
    "\1\u0145\35\5\1\0\11\5\12\0\1\5\1\6\1\0"+
    "\16\5\1\u0146\23\5\1\0\11\5\12\0\1\5\1\6"+
    "\1\0\6\5\1\u0147\33\5\1\0\11\5\12\0\1\5"+
    "\1\6\1\0\42\5\1\0\2\5\1\u0148\6\5\12\0"+
    "\1\5\1\6\1\0\22\5\1\u0149\17\5\1\0\11\5"+
    "\12\0\1\5\1\6\1\0\10\5\1\u014a\31\5\1\0"+
    "\11\5\12\0\1\5\1\6\1\0\6\5\1\u014b\33\5"+
    "\1\0\11\5\12\0\1\5\1\6\1\0\31\5\1\u014c"+
    "\10\5\1\0\11\5\12\0\1\5\1\6\1\0\31\5"+
    "\1\u014d\10\5\1\0\11\5\12\0\1\5\1\6\1\0"+
    "\21\5\1\u014e\20\5\1\0\11\5\12\0\1\5\1\6"+
    "\1\0\10\5\1\u014f\31\5\1\0\11\5\12\0\1\5"+
    "\1\6\1\0\10\5\1\u0150\31\5\1\0\11\5\12\0"+
    "\1\5\1\6\1\0\16\5\1\u0151\23\5\1\0\11\5"+
    "\12\0\1\5\1\6\1\0\1\u0152\41\5\1\0\11\5"+
    "\12\0\1\5\1\6\1\0\6\5\1\u0153\33\5\1\0"+
    "\11\5\12\0\1\5\1\6\1\0\16\5\1\u0154\23\5"+
    "\1\0\11\5\12\0\1\5\1\6\1\0\6\5\1\u0155"+
    "\33\5\1\0\11\5\12\0\1\5\1\6\1\0\20\5"+
    "\1\u0156\21\5\1\0\11\5\12\0\1\5\1\6\1\0"+
    "\16\5\1\u0157\23\5\1\0\11\5\12\0\1\5\1\6"+
    "\1\0\2\5\1\u0158\37\5\1\0\11\5\12\0\1\5"+
    "\1\6\1\0\31\5\1\u0159\10\5\1\0\11\5\12\0"+
    "\1\5\1\6\1\0\20\5\1\u015a\21\5\1\0\11\5"+
    "\12\0\1\5\1\6\1\0\4\5\1\u015b\35\5\1\0"+
    "\11\5\12\0\1\5\1\6\1\0\4\5\1\u015c\35\5"+
    "\1\0\11\5\12\0\1\5\1\6\1\0\16\5\1\u015d"+
    "\23\5\1\0\11\5\12\0\1\5\1\6\1\0\32\5"+
    "\1\u015e\7\5\1\0\11\5\12\0\1\5\1\6\1\0"+
    "\2\5\1\u015f\37\5\1\0\11\5\12\0\1\5\1\6"+
    "\1\0\16\5\1\u0160\23\5\1\0\11\5\12\0\1\5"+
    "\1\6\1\0\1\u0161\41\5\1\0\11\5\12\0\1\5"+
    "\1\6\1\0\16\5\1\u0162\23\5\1\0\11\5\12\0"+
    "\1\5\1\6\1\0\1\u0163\41\5\1\0\11\5\12\0"+
    "\1\5\1\6\1\0\10\5\1\u0164\31\5\1\0\11\5"+
    "\12\0\1\5\1\6\1\0\32\5\1\u0165\7\5\1\0"+
    "\11\5\12\0\1\5\1\6\1\0\6\5\1\u0166\33\5"+
    "\1\0\11\5\12\0\1\5\1\6\1\0\6\5\1\u0167"+
    "\33\5\1\0\11\5\12\0\1\5\1\6\1\0\4\5"+
    "\1\u0168\35\5\1\0\11\5\12\0\1\5\1\6\1\0"+
    "\20\5\1\u0169\21\5\1\0\11\5\12\0\1\5\1\6"+
    "\1\0\6\5\1\u016a\33\5\1\0\11\5\12\0\1\5"+
    "\1\6\1\0\16\5\1\u016b\23\5\1\0\11\5\12\0"+
    "\1\5\1\6\1\0\10\5\1\u016c\31\5\1\0\11\5"+
    "\12\0\1\5\1\6\1\0\16\5\1\u016d\23\5\1\0"+
    "\11\5\12\0\1\5\1\6\1\0\32\5\1\u016e\7\5"+
    "\1\0\11\5\12\0\1\5\1\6\1\0\20\5\1\u016f"+
    "\21\5\1\0\11\5\12\0\1\5\1\6\1\0\6\5"+
    "\1\u0170\33\5\1\0\11\5\12\0\1\5\1\6\1\0"+
    "\16\5\1\u0171\23\5\1\0\11\5\6\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[18126];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\30\1\6\11\u014f\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[369];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    StringBuilder string = new StringBuilder();
  
  private Symbol symbol(int type) {
    return new Symbol(type, yyline+1, yycolumn+1);
  }

  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline+1, yycolumn+1, value);
  }


  private void error(String message) {
    System.out.println("Error en linea line "+(yyline+1)+", columna "+(yycolumn+1)+" : "+message);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 190) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                return symbol(EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { error("Simbolo invalido <"+ yytext()+">");
            }
          case 62: break;
          case 2: 
            { /*Nothing to do*/
            }
          case 63: break;
          case 3: 
            { return symbol(IDENTIFICADOR, yytext());
            }
          case 64: break;
          case 4: 
            { return symbol(SIGNO_MENOR, yytext());
            }
          case 65: break;
          case 5: 
            { return symbol(SIGNO_MAYOR, yytext());
            }
          case 66: break;
          case 6: 
            { return symbol(SIGNO_IGUAL, yytext());
            }
          case 67: break;
          case 7: 
            { return symbol(COMILLAS, yytext());
            }
          case 68: break;
          case 8: 
            { return symbol(CORCHETE_ABIERTO, yytext());
            }
          case 69: break;
          case 9: 
            { return symbol(CORCHETE_CERRADO, yytext());
            }
          case 70: break;
          case 10: 
            { return symbol(ID_TEXTO, yytext());
            }
          case 71: break;
          case 11: 
            { return symbol(NUMERO_HEXADECIMAL, yytext());
            }
          case 72: break;
          case 12: 
            { return symbol(MENU, yytext());
            }
          case 73: break;
          case 13: 
            { return symbol(ANCHO, yytext());
            }
          case 74: break;
          case 14: 
            { return symbol(CLASE, yytext());
            }
          case 75: break;
          case 15: 
            { return symbol(COLOR, yytext());
            }
          case 76: break;
          case 16: 
            { return symbol(PADRE, yytext());
            }
          case 77: break;
          case 17: 
            { return symbol(SITIO, yytext());
            }
          case 78: break;
          case 18: 
            { return symbol(TEXTO, yytext());
            }
          case 79: break;
          case 19: 
            { return symbol(VALOR, yytext());
            }
          case 80: break;
          case 20: 
            { return symbol(VIDEO, yytext());
            }
          case 81: break;
          case 21: 
            { return symbol(ACCION_ABIERTO, yytext());
            }
          case 82: break;
          case 22: 
            { return symbol(ALTURA, yytext());
            }
          case 83: break;
          case 23: 
            { return symbol(IMAGEN, yytext());
            }
          case 84: break;
          case 24: 
            { return symbol(NOMBRE, yytext());
            }
          case 85: break;
          case 25: 
            { return symbol(ORIGEN, yytext());
            }
          case 86: break;
          case 26: 
            { return symbol(PAGINA, yytext());
            }
          case 87: break;
          case 27: 
            { return symbol(TITULO, yytext());
            }
          case 88: break;
          case 28: 
            { return symbol(CENTRAR, yytext());
            }
          case 89: break;
          case 29: 
            { return symbol(PARRAFO, yytext());
            }
          case 90: break;
          case 30: 
            { return symbol(DERECHA, yytext());
            }
          case 91: break;
          case 31: 
            { return symbol(ACCIONES_ABIERTO, yytext());
            }
          case 92: break;
          case 32: 
            { return symbol(ATRIBUTO_ABIERTO, yytext());
            }
          case 93: break;
          case 33: 
            { return symbol(ETIQUETA_ABIERTO, yytext());
            }
          case 94: break;
          case 34: 
            { return symbol(ATRIBUTOS_ABIERTO, yytext());
            }
          case 95: break;
          case 35: 
            { return symbol(ETIQUETAS, yytext());
            }
          case 96: break;
          case 36: 
            { return symbol(ETIQUETAS_ABIERTO, yytext());
            }
          case 97: break;
          case 37: 
            { return symbol(IZQUIERDA, yytext());
            }
          case 98: break;
          case 38: 
            { return symbol(PARAMETRO_ABIERTO, yytext());
            }
          case 99: break;
          case 39: 
            { return symbol(ALINEACION, yytext());
            }
          case 100: break;
          case 40: 
            { return symbol(PARAMETROS_ABIERTO, yytext());
            }
          case 101: break;
          case 41: 
            { return symbol(JUSTIFICAR, yytext());
            }
          case 102: break;
          case 42: 
            { return symbol(ACCION_CERRADO, yytext());
            }
          case 103: break;
          case 43: 
            { return symbol(NUEVA_PAGINA, yytext());
            }
          case 104: break;
          case 44: 
            { return symbol(BORRAR_PAGINA, yytext());
            }
          case 105: break;
          case 45: 
            { return symbol(ACCIONES_CERRADO, yytext());
            }
          case 106: break;
          case 46: 
            { return symbol(ATRIBUTO_CERRADO, yytext());
            }
          case 107: break;
          case 47: 
            { return symbol(ETIQUETA_CERRADO, yytext());
            }
          case 108: break;
          case 48: 
            { return symbol(ATRIBUTOS_CERRADO, yytext());
            }
          case 109: break;
          case 49: 
            { return symbol(ETIQUETAS_CERRADO, yytext());
            }
          case 110: break;
          case 50: 
            { return symbol(PARAMETRO_CERRADO, yytext());
            }
          case 111: break;
          case 51: 
            { return symbol(FECHA_CREACION, yytext());
            }
          case 112: break;
          case 52: 
            { return symbol(NUEVO_SITIO_WEB, yytext());
            }
          case 113: break;
          case 53: 
            { return symbol(PARAMETROS_CERRADO, yytext());
            }
          case 114: break;
          case 54: 
            { return symbol(BORRAR_SITIO_WEB, yytext());
            }
          case 115: break;
          case 55: 
            { return symbol(MODIFICAR_PAGINA, yytext());
            }
          case 116: break;
          case 56: 
            { return symbol(USUARIO_CREACION, yytext());
            }
          case 117: break;
          case 57: 
            { return symbol(BORRAR_COMPONENTE, yytext());
            }
          case 118: break;
          case 58: 
            { return symbol(AGREGAR_COMPONENTE, yytext());
            }
          case 119: break;
          case 59: 
            { return symbol(FECHA_MODIFICACION, yytext());
            }
          case 120: break;
          case 60: 
            { return symbol(MODIFICAR_COMPONENTE, yytext());
            }
          case 121: break;
          case 61: 
            { return symbol(USUARIO_MODIFICACION, yytext());
            }
          case 122: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexer(reader);
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
