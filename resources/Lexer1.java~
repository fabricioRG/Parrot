/* The following code was generated by JFlex 1.6.1 */

package parrot.backend.analizadores;

import java_cup.runtime.*;
import static parrot.backend.analizadores.sym.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>AnalizadorLexico1.lex</tt>
 */
public class Lexer1 implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\0\1\71"+
    "\1\54\1\55\5\0\1\10\2\0\1\55\1\0\1\53\1\6\11\5"+
    "\2\0\1\66\1\70\1\67\2\0\1\12\1\14\1\16\1\61\1\20"+
    "\1\57\1\60\1\63\1\22\1\64\1\4\1\24\1\26\1\30\1\32"+
    "\1\34\1\36\1\40\1\42\1\44\1\46\1\50\1\65\1\52\1\4"+
    "\1\62\1\7\1\0\1\11\1\0\1\56\1\0\1\13\1\15\1\17"+
    "\1\4\1\21\3\4\1\23\2\4\1\25\1\27\1\31\1\33\1\35"+
    "\1\37\1\41\1\43\1\45\1\47\1\51\1\4\1\4\2\4\1\0"+
    "\1\72\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uff93\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\24\1\1\3\1\4\1\5\1\6"+
    "\1\7\4\0\1\10\23\0\1\11\17\0\1\10\2\0"+
    "\1\12\1\0\1\13\57\0\1\14\52\0\1\15\3\0"+
    "\1\16\1\17\11\0\1\20\1\21\1\22\2\0\1\23"+
    "\11\0\1\24\5\0\1\25\1\0\1\26\6\0\1\27"+
    "\2\0\1\30\1\0\1\31\1\32\14\0\1\33\16\0"+
    "\1\34\7\0\1\35\3\0\1\36\2\0\1\37\1\0"+
    "\1\40\4\0\2\41\14\0\1\42\2\0\1\43\1\0"+
    "\1\44\2\0\1\45\4\0\1\46\1\47\3\0\1\50"+
    "\2\0\1\51\1\52\1\53\5\0\1\54\7\0\1\55"+
    "\2\0\1\56\1\57\1\60\3\0\1\61\13\0\1\62"+
    "\3\0\1\63\6\0\1\64\7\0\1\65\20\0\1\66"+
    "\6\0\1\67\5\0\1\70\1\0\1\71\1\72\3\0"+
    "\1\73\3\0\1\74\2\0\1\75\2\0\1\76\1\77";

  private static int [] zzUnpackAction() {
    int [] result = new int[406];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\73\0\261\0\354\0\u0127\0\u0162"+
    "\0\u019d\0\u01d8\0\u0213\0\u024e\0\u0289\0\u02c4\0\u02ff\0\u033a"+
    "\0\u0375\0\u03b0\0\u03eb\0\u0426\0\u0461\0\u049c\0\u04d7\0\u0512"+
    "\0\73\0\73\0\73\0\73\0\73\0\u054d\0\u0588\0\u05c3"+
    "\0\u05fe\0\u054d\0\u0639\0\u0674\0\u06af\0\u06ea\0\u0725\0\u0760"+
    "\0\u079b\0\u07d6\0\u0811\0\u084c\0\u0887\0\u08c2\0\u08fd\0\u0938"+
    "\0\u0973\0\u09ae\0\u09e9\0\u0a24\0\u0a5f\0\73\0\u0a9a\0\u0ad5"+
    "\0\u0b10\0\u0b4b\0\u0b86\0\u0bc1\0\u0bfc\0\u0c37\0\u0c72\0\u0cad"+
    "\0\u0ce8\0\u0d23\0\u0d5e\0\u0d99\0\u0dd4\0\73\0\u0e0f\0\u0e4a"+
    "\0\73\0\u0e85\0\73\0\u0ec0\0\u0efb\0\u0f36\0\u0f71\0\u0fac"+
    "\0\u0fe7\0\u1022\0\u105d\0\u1098\0\u10d3\0\u110e\0\u1149\0\u1184"+
    "\0\u11bf\0\u11fa\0\u1235\0\u1270\0\u12ab\0\u12e6\0\u1321\0\u135c"+
    "\0\u1397\0\u13d2\0\u140d\0\u1448\0\u1483\0\u14be\0\u14f9\0\u1534"+
    "\0\u156f\0\u15aa\0\u15e5\0\u1620\0\u165b\0\u1696\0\u16d1\0\u170c"+
    "\0\u1747\0\u1782\0\u17bd\0\u17f8\0\u1833\0\u186e\0\u18a9\0\u18e4"+
    "\0\u191f\0\u195a\0\73\0\u1995\0\u19d0\0\u1a0b\0\u1a46\0\u1a81"+
    "\0\u1abc\0\u1af7\0\u1b32\0\u1b6d\0\u1ba8\0\u1be3\0\u1c1e\0\u1c59"+
    "\0\u1c94\0\u1ccf\0\u1d0a\0\u1d45\0\u1d80\0\u1dbb\0\u1df6\0\u1e31"+
    "\0\u1e6c\0\u1ea7\0\u1ee2\0\u1f1d\0\u1f58\0\u1f93\0\u1fce\0\u2009"+
    "\0\u2044\0\u207f\0\u20ba\0\u20f5\0\u2130\0\u216b\0\u21a6\0\u21e1"+
    "\0\u221c\0\u2257\0\u2292\0\u22cd\0\u2308\0\73\0\u2343\0\u237e"+
    "\0\u23b9\0\73\0\73\0\u23f4\0\u242f\0\u246a\0\u24a5\0\u24e0"+
    "\0\u251b\0\u2556\0\u2591\0\u25cc\0\73\0\73\0\73\0\u2607"+
    "\0\u2642\0\73\0\u267d\0\u26b8\0\u26f3\0\u272e\0\u2769\0\u27a4"+
    "\0\u27df\0\u281a\0\u2855\0\73\0\u2890\0\u28cb\0\u2906\0\u2941"+
    "\0\u297c\0\u29b7\0\u29f2\0\73\0\u2a2d\0\u2a68\0\u2aa3\0\u2ade"+
    "\0\u2b19\0\u2b54\0\73\0\u2b8f\0\u2bca\0\73\0\u2c05\0\73"+
    "\0\73\0\u2c40\0\u2c7b\0\u2cb6\0\u2cf1\0\u2d2c\0\u2d67\0\u2da2"+
    "\0\u2ddd\0\u2e18\0\u2e53\0\u2e8e\0\u2ec9\0\73\0\u2f04\0\u2f3f"+
    "\0\u2f7a\0\u2fb5\0\u2ff0\0\u302b\0\u3066\0\u30a1\0\u30dc\0\u3117"+
    "\0\u3152\0\u318d\0\u31c8\0\u3203\0\u323e\0\u3279\0\u32b4\0\u32ef"+
    "\0\u332a\0\u3365\0\u33a0\0\u33db\0\73\0\u3416\0\u3451\0\u348c"+
    "\0\73\0\u34c7\0\u3502\0\73\0\u353d\0\u3578\0\u35b3\0\u35ee"+
    "\0\u3629\0\u3664\0\u369f\0\u36da\0\u3715\0\u3750\0\u378b\0\u37c6"+
    "\0\u3801\0\u383c\0\u3877\0\u38b2\0\u38ed\0\u3928\0\u3963\0\u399e"+
    "\0\73\0\u39d9\0\u3a14\0\73\0\u3a4f\0\73\0\u3a8a\0\u3ac5"+
    "\0\73\0\u3b00\0\u3b3b\0\u3b76\0\u3bb1\0\73\0\73\0\u3bec"+
    "\0\u3c27\0\u3c62\0\u3c9d\0\u3cd8\0\u3d13\0\73\0\u3d4e\0\u3d89"+
    "\0\u3dc4\0\u3dff\0\u3e3a\0\u3e75\0\u3eb0\0\73\0\u3eeb\0\u3f26"+
    "\0\u3f61\0\u3f9c\0\u3fd7\0\u4012\0\u404d\0\73\0\u4088\0\u40c3"+
    "\0\73\0\73\0\u40fe\0\u4139\0\u4174\0\u41af\0\73\0\u41ea"+
    "\0\u4225\0\u4260\0\u429b\0\u42d6\0\u4311\0\u434c\0\u4387\0\u43c2"+
    "\0\u43fd\0\u4438\0\73\0\u4473\0\u44ae\0\u44e9\0\73\0\u4524"+
    "\0\u455f\0\u459a\0\u45d5\0\u4610\0\u464b\0\73\0\u4686\0\u46c1"+
    "\0\u46fc\0\u4737\0\u4772\0\u47ad\0\u47e8\0\73\0\u4823\0\u485e"+
    "\0\u4899\0\u48d4\0\u490f\0\u494a\0\u4985\0\u49c0\0\u49fb\0\u4a36"+
    "\0\u4a71\0\u4aac\0\u4ae7\0\u4b22\0\u4b5d\0\u4b98\0\73\0\u4bd3"+
    "\0\u4c0e\0\u4c49\0\u4c84\0\u4cbf\0\u4cfa\0\73\0\u4d35\0\u4d70"+
    "\0\u4dab\0\u4de6\0\u4e21\0\73\0\u4e5c\0\73\0\73\0\u4e97"+
    "\0\u4ed2\0\u4f0d\0\73\0\u4f48\0\u4f83\0\u4fbe\0\73\0\u4ff9"+
    "\0\u5034\0\73\0\u506f\0\u50aa\0\73\0\73";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[406];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\3\2\1\5\2\2\1\6\1\7"+
    "\1\10\1\2\1\11\1\2\1\12\1\13\1\14\3\2"+
    "\1\15\1\2\1\16\1\17\1\20\1\2\1\21\1\22"+
    "\4\2\1\23\1\2\1\24\1\2\1\25\1\2\2\26"+
    "\1\2\1\27\3\2\1\30\6\2\1\31\1\32\1\33"+
    "\1\34\1\35\75\0\1\4\70\0\3\36\1\37\1\40"+
    "\1\41\2\36\1\0\1\42\4\40\1\43\3\40\1\44"+
    "\3\40\1\45\5\40\1\46\7\40\1\47\3\40\1\50"+
    "\2\40\1\36\1\51\2\36\2\40\1\52\2\40\1\53"+
    "\1\40\5\36\16\0\2\54\4\0\1\55\3\0\1\56"+
    "\13\0\2\57\12\0\1\60\30\0\2\54\24\0\2\57"+
    "\57\0\1\61\64\0\1\62\5\0\1\63\104\0\1\64"+
    "\1\65\71\0\2\65\106\0\1\66\43\0\1\67\72\0"+
    "\2\70\12\0\1\71\56\0\2\70\77\0\1\72\44\0"+
    "\1\73\1\74\71\0\2\74\101\0\1\75\70\0\1\76"+
    "\1\0\1\77\112\0\1\100\42\0\2\101\71\0\2\102"+
    "\4\0\2\103\12\0\2\104\55\0\1\105\52\0\11\36"+
    "\1\106\64\36\1\37\1\40\1\41\3\36\1\106\4\40"+
    "\1\43\3\40\1\44\3\40\1\45\5\40\1\46\7\40"+
    "\1\47\3\40\1\50\2\40\1\36\1\51\2\36\2\40"+
    "\1\52\2\40\1\53\1\40\10\36\1\107\1\40\1\110"+
    "\3\36\1\111\41\40\2\36\11\40\10\36\1\112\1\36"+
    "\2\41\2\36\1\113\64\36\1\107\1\40\1\110\3\36"+
    "\1\111\6\40\1\114\32\40\2\36\11\40\10\36\1\107"+
    "\1\40\1\110\3\36\1\111\14\40\1\115\24\40\2\36"+
    "\5\40\1\116\3\40\10\36\1\107\1\40\1\110\3\36"+
    "\1\111\6\40\1\117\32\40\2\36\11\40\10\36\1\107"+
    "\1\40\1\110\3\36\1\111\1\120\40\40\2\36\11\40"+
    "\10\36\1\107\1\40\1\110\3\36\1\111\10\40\1\121"+
    "\30\40\2\36\11\40\10\36\1\107\1\40\1\110\3\36"+
    "\1\111\10\40\1\122\30\40\2\36\11\40\11\36\1\123"+
    "\1\124\3\36\1\106\41\123\4\36\7\123\10\36\1\107"+
    "\1\40\1\110\3\36\1\111\6\40\1\125\32\40\2\36"+
    "\11\40\10\36\1\107\1\40\1\110\3\36\1\111\34\40"+
    "\1\126\4\40\2\36\11\40\5\36\16\0\2\127\75\0"+
    "\1\130\21\0\1\131\44\0\1\132\114\0\2\133\71\0"+
    "\1\134\72\0\1\135\44\0\1\136\104\0\1\137\70\0"+
    "\1\140\1\141\71\0\2\141\130\0\1\142\37\0\2\143"+
    "\63\0\1\144\74\0\1\145\110\0\2\146\16\0\1\147"+
    "\1\150\51\0\2\146\75\0\1\151\100\0\1\152\64\0"+
    "\1\153\74\0\1\154\50\0\2\155\63\0\2\156\24\0"+
    "\2\157\71\0\2\160\37\0\2\161\75\0\1\162\54\0"+
    "\3\36\1\107\5\36\1\111\64\36\1\107\1\40\2\110"+
    "\2\36\1\111\41\40\2\36\11\40\10\36\1\112\5\36"+
    "\1\113\64\36\1\107\1\40\1\110\3\36\1\111\16\40"+
    "\1\163\22\40\2\36\11\40\10\36\1\107\1\40\1\110"+
    "\3\36\1\111\1\164\40\40\2\36\11\40\10\36\1\107"+
    "\1\40\1\110\3\36\1\111\24\40\1\165\14\40\2\36"+
    "\11\40\10\36\1\107\1\40\1\110\3\36\1\111\16\40"+
    "\1\166\22\40\2\36\11\40\10\36\1\107\1\40\1\110"+
    "\3\36\1\111\26\40\1\167\12\40\2\36\11\40\10\36"+
    "\1\107\1\40\1\110\3\36\1\111\32\40\1\170\6\40"+
    "\2\36\11\40\10\36\1\107\1\40\1\110\3\36\1\111"+
    "\41\40\2\36\4\40\1\171\4\40\10\36\1\172\1\123"+
    "\1\124\3\36\1\173\41\123\4\36\7\123\10\36\1\172"+
    "\1\123\2\124\2\36\1\173\41\123\4\36\7\123\10\36"+
    "\1\107\1\40\1\110\3\36\1\111\26\40\1\174\12\40"+
    "\2\36\11\40\10\36\1\107\1\40\1\110\3\36\1\111"+
    "\30\40\1\175\10\40\2\36\11\40\5\36\22\0\2\176"+
    "\77\0\1\177\110\0\1\200\107\0\1\201\31\0\2\202"+
    "\67\0\1\203\112\0\1\204\74\0\1\205\62\0\1\206"+
    "\76\0\1\207\1\210\71\0\2\210\55\0\1\211\64\0"+
    "\2\212\125\0\1\213\102\0\1\214\24\0\2\215\101\0"+
    "\1\216\110\0\1\217\54\0\1\220\114\0\1\221\74\0"+
    "\1\222\36\0\1\223\112\0\2\224\55\0\2\225\113\0"+
    "\2\226\53\0\2\227\107\0\2\230\114\0\1\231\7\0"+
    "\3\36\1\107\1\40\1\110\3\36\1\111\32\40\1\232"+
    "\6\40\2\36\11\40\10\36\1\107\1\40\1\110\3\36"+
    "\1\111\41\40\2\36\3\40\1\233\5\40\10\36\1\107"+
    "\1\40\1\110\3\36\1\111\34\40\1\234\4\40\2\36"+
    "\11\40\10\36\1\107\1\40\1\110\3\36\1\111\34\40"+
    "\1\235\4\40\2\36\11\40\10\36\1\107\1\40\1\110"+
    "\3\36\1\111\26\40\1\236\12\40\2\36\11\40\10\36"+
    "\1\107\1\40\1\110\3\36\1\111\34\40\1\237\4\40"+
    "\2\36\11\40\10\36\1\107\1\40\1\110\3\36\1\111"+
    "\6\40\1\240\32\40\2\36\11\40\10\36\1\172\5\36"+
    "\1\173\64\36\1\107\1\40\1\110\3\36\1\111\6\40"+
    "\1\241\32\40\2\36\11\40\10\36\1\107\1\40\1\110"+
    "\3\36\1\111\32\40\1\242\6\40\2\36\11\40\5\36"+
    "\32\0\2\243\57\0\1\244\112\0\1\245\64\0\1\246"+
    "\54\0\2\247\135\0\1\250\24\0\1\251\100\0\1\252"+
    "\112\0\1\253\100\0\1\254\1\255\71\0\2\255\102\0"+
    "\1\256\53\0\2\257\43\0\1\260\17\0\1\261\60\0"+
    "\1\262\100\0\2\263\73\0\1\264\62\0\1\265\104\0"+
    "\1\266\72\0\1\267\64\0\1\270\106\0\1\271\72\0"+
    "\2\272\53\0\2\273\71\0\2\274\105\0\2\275\45\0"+
    "\2\276\71\0\1\277\60\0\3\36\1\107\1\40\1\110"+
    "\3\36\1\111\26\40\1\300\12\40\2\36\11\40\10\36"+
    "\1\107\1\40\1\110\3\36\1\111\6\40\1\301\32\40"+
    "\2\36\11\40\10\36\1\107\1\40\1\110\3\36\1\111"+
    "\10\40\1\302\30\40\2\36\11\40\10\36\1\303\1\40"+
    "\1\110\3\36\1\304\41\40\2\36\11\40\10\36\1\107"+
    "\1\40\1\110\3\36\1\111\1\305\40\40\2\36\11\40"+
    "\10\36\1\107\1\40\1\110\3\36\1\111\12\40\1\306"+
    "\26\40\2\36\11\40\10\36\1\107\1\40\1\110\3\36"+
    "\1\111\20\40\1\307\20\40\2\36\11\40\10\36\1\107"+
    "\1\40\1\110\3\36\1\111\4\40\1\310\34\40\2\36"+
    "\11\40\10\36\1\107\1\40\1\110\3\36\1\111\10\40"+
    "\1\311\30\40\2\36\11\40\5\36\30\0\2\312\53\0"+
    "\1\313\72\0\1\314\126\0\2\315\35\0\1\316\120\0"+
    "\1\317\52\0\1\320\1\321\71\0\2\321\73\0\1\322"+
    "\70\0\2\323\127\0\1\324\72\0\1\325\44\0\1\326"+
    "\62\0\2\327\63\0\1\330\112\0\1\331\62\0\1\332"+
    "\102\0\2\333\53\0\2\334\123\0\2\335\51\0\2\336"+
    "\121\0\1\337\14\0\3\36\1\107\1\40\1\110\3\36"+
    "\1\111\1\340\40\40\2\36\11\40\10\36\1\107\1\40"+
    "\1\110\3\36\1\111\16\40\1\341\22\40\2\36\11\40"+
    "\10\36\1\107\1\40\1\110\3\36\1\111\6\40\1\342"+
    "\32\40\2\36\11\40\10\36\1\303\5\36\1\304\64\36"+
    "\1\107\1\40\1\110\3\36\1\111\41\40\2\36\2\40"+
    "\1\343\6\40\10\36\1\107\1\40\1\110\3\36\1\111"+
    "\20\40\1\344\20\40\2\36\11\40\10\36\1\345\1\40"+
    "\1\110\3\36\1\346\41\40\2\36\11\40\10\36\1\107"+
    "\1\40\1\110\3\36\1\111\41\40\2\36\6\40\1\347"+
    "\2\40\10\36\1\107\1\40\1\110\3\36\1\111\41\40"+
    "\2\36\2\40\1\350\6\40\5\36\20\0\2\351\67\0"+
    "\1\352\120\0\2\353\65\0\1\354\110\0\1\355\60\0"+
    "\1\356\1\357\71\0\2\357\43\0\1\360\110\0\1\361"+
    "\100\0\1\362\74\0\2\363\57\0\1\364\70\0\2\365"+
    "\107\0\2\366\43\0\2\367\71\0\2\370\67\0\1\371"+
    "\7\0\1\372\44\0\3\36\1\107\1\40\1\110\3\36"+
    "\1\111\26\40\1\373\12\40\2\36\11\40\10\36\1\374"+
    "\1\40\1\110\3\36\1\375\41\40\2\36\11\40\10\36"+
    "\1\107\1\40\1\110\3\36\1\111\26\40\1\376\12\40"+
    "\2\36\11\40\10\36\1\107\1\40\1\110\3\36\1\111"+
    "\20\40\1\377\20\40\2\36\11\40\10\36\1\u0100\1\40"+
    "\1\110\3\36\1\u0101\41\40\2\36\11\40\10\36\1\345"+
    "\5\36\1\346\64\36\1\107\1\40\1\110\3\36\1\111"+
    "\1\u0102\40\40\2\36\11\40\10\36\1\107\1\40\1\110"+
    "\3\36\1\111\10\40\1\u0103\30\40\2\36\11\40\5\36"+
    "\42\0\2\u0104\51\0\1\u0105\102\0\2\u0106\115\0\1\u0107"+
    "\32\0\1\u0108\15\0\1\u0109\5\0\1\u010a\42\0\1\u010b"+
    "\1\u010c\71\0\2\u010c\71\0\1\u010d\72\0\1\u010e\102\0"+
    "\1\u010f\110\0\2\u0110\107\0\1\u0111\34\0\2\u0112\115\0"+
    "\2\u0113\71\0\2\u0114\71\0\2\u0115\65\0\1\u0116\64\0"+
    "\1\u0117\40\0\3\36\1\u0118\1\40\1\110\3\36\1\u0119"+
    "\41\40\2\36\11\40\10\36\1\374\5\36\1\375\64\36"+
    "\1\107\1\40\1\110\3\36\1\111\41\40\2\36\4\40"+
    "\1\u011a\4\40\10\36\1\u011b\1\40\1\110\3\36\1\u011c"+
    "\41\40\2\36\11\40\10\36\1\u0100\5\36\1\u0101\64\36"+
    "\1\u011d\1\40\1\110\3\36\1\u011e\41\40\2\36\11\40"+
    "\10\36\1\107\1\40\1\110\3\36\1\111\4\40\1\u011f"+
    "\34\40\2\36\11\40\5\36\32\0\1\u0120\102\0\2\u0121"+
    "\45\0\1\u0122\106\0\1\u0123\52\0\1\u0124\102\0\1\u0125"+
    "\112\0\1\u0126\1\u0127\71\0\2\u0127\67\0\1\u0128\112\0"+
    "\1\u0129\56\0\1\u012a\60\0\2\u012b\55\0\1\u012c\7\0"+
    "\1\u012d\106\0\2\u012e\61\0\2\u012f\51\0\2\u0130\117\0"+
    "\2\u0131\51\0\1\u0132\133\0\1\u0133\11\0\3\36\1\u0118"+
    "\5\36\1\u0119\64\36\1\107\1\40\1\110\3\36\1\111"+
    "\1\u0134\40\40\2\36\11\40\10\36\1\u011b\5\36\1\u011c"+
    "\64\36\1\u011d\5\36\1\u011e\64\36\1\107\1\40\1\110"+
    "\3\36\1\111\1\u0135\40\40\2\36\11\40\5\36\30\0"+
    "\1\u0136\74\0\1\u0137\66\0\1\u0138\124\0\1\u0139\56\0"+
    "\1\u013a\104\0\1\u013b\36\0\1\u013c\72\0\1\u013d\112\0"+
    "\2\u013e\67\0\1\u013f\64\0\1\u0140\102\0\2\u0141\71\0"+
    "\2\u0142\61\0\2\u0143\51\0\1\u0144\102\0\1\u0145\50\0"+
    "\3\36\1\u0146\1\40\1\110\3\36\1\u0147\41\40\2\36"+
    "\11\40\10\36\1\107\1\40\1\110\3\36\1\111\26\40"+
    "\1\u0148\12\40\2\36\11\40\5\36\26\0\1\u0149\100\0"+
    "\1\u014a\60\0\1\u014b\72\0\1\u014c\66\0\1\u014d\15\0"+
    "\1\u014e\66\0\1\u014f\74\0\1\u0150\60\0\1\u0151\133\0"+
    "\1\u0152\53\0\2\u0153\45\0\1\u0154\133\0\1\u0155\13\0"+
    "\3\36\1\u0146\5\36\1\u0147\64\36\1\u0156\1\40\1\110"+
    "\3\36\1\u0157\41\40\2\36\11\40\5\36\34\0\1\u0158"+
    "\70\0\1\u0159\70\0\1\u015a\74\0\1\u015b\72\0\1\u015c"+
    "\52\0\1\u015d\72\0\1\u015e\136\0\1\u015f\26\0\1\u0160"+
    "\102\0\1\u0161\72\0\1\u0162\72\0\1\u0163\50\0\3\36"+
    "\1\u0156\5\36\1\u0157\61\36\32\0\1\u0164\70\0\1\u0165"+
    "\54\0\1\u0166\136\0\1\u0167\42\0\1\u0168\124\0\1\u0169"+
    "\77\0\1\u016a\23\0\1\u016b\133\0\1\u016c\45\0\1\u016d"+
    "\56\0\1\u016e\104\0\1\u016f\62\0\1\u0170\137\0\1\u0171"+
    "\41\0\1\u0172\60\0\1\u0173\70\0\1\u0174\74\0\1\u0175"+
    "\72\0\1\u0176\100\0\1\u0177\54\0\1\u0178\100\0\1\u0179"+
    "\102\0\1\u017a\62\0\1\u017b\104\0\1\u017c\70\0\1\u017d"+
    "\56\0\1\u017e\110\0\1\u017f\56\0\1\u0180\72\0\1\u0181"+
    "\104\0\1\u0182\106\0\1\u0183\42\0\1\u0184\106\0\1\u0185"+
    "\54\0\1\u0186\110\0\1\u0187\54\0\1\u0188\102\0\1\u0189"+
    "\114\0\1\u018a\46\0\1\u018b\72\0\1\u018c\70\0\1\u018d"+
    "\106\0\1\u018e\60\0\1\u018f\102\0\1\u0190\64\0\1\u0191"+
    "\100\0\1\u0192\106\0\1\u0193\60\0\1\u0194\60\0\1\u0195"+
    "\102\0\1\u0196\42\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[20709];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\24\1\5\11\4\0\1\1"+
    "\23\0\1\11\17\0\1\11\2\0\1\11\1\0\1\11"+
    "\57\0\1\11\52\0\1\11\3\0\2\11\11\0\3\11"+
    "\2\0\1\11\11\0\1\11\5\0\1\1\1\0\1\11"+
    "\6\0\1\11\2\0\1\11\1\0\2\11\14\0\1\11"+
    "\16\0\1\1\7\0\1\11\3\0\1\11\2\0\1\11"+
    "\1\0\1\1\4\0\2\1\14\0\1\11\2\0\1\11"+
    "\1\0\1\11\2\0\1\11\4\0\2\11\3\0\1\1"+
    "\2\0\1\11\2\1\5\0\1\11\7\0\1\11\2\0"+
    "\2\11\1\1\3\0\1\11\13\0\1\11\3\0\1\11"+
    "\6\0\1\11\7\0\1\11\20\0\1\11\6\0\1\11"+
    "\5\0\1\11\1\0\2\11\3\0\1\11\3\0\1\11"+
    "\2\0\1\11\2\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[406];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    StringBuilder string = new StringBuilder();
  
  private Symbol symbol(int type) {
    return new Symbol(type, yyline+1, yycolumn+1);
  }

  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline+1, yycolumn+1, value);
  }


  private void error(String message) {
    System.out.println("Error en linea line "+(yyline+1)+", columna "+(yycolumn+1)+" : "+message);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer1(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 196) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                return symbol(EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { error("Simbolo invalido <"+ yytext()+">");
            }
          case 64: break;
          case 2: 
            { /*Nothing to do*/
            }
          case 65: break;
          case 3: 
            { return symbol(SIGNO_MENOR, yytext());
            }
          case 66: break;
          case 4: 
            { return symbol(SIGNO_MAYOR, yytext());
            }
          case 67: break;
          case 5: 
            { return symbol(SIGNO_IGUAL, yytext());
            }
          case 68: break;
          case 6: 
            { return symbol(COMILLAS, yytext());
            }
          case 69: break;
          case 7: 
            { return symbol(OR, yytext());
            }
          case 70: break;
          case 8: 
            { return symbol(TEXTO_PARAMETRO, yytext());
            }
          case 71: break;
          case 9: 
            { return symbol(ID_TEXTO, yytext());
            }
          case 72: break;
          case 10: 
            { return symbol(IDENTIFICADOR, yytext());
            }
          case 73: break;
          case 11: 
            { return symbol(ENTERO_PARAMETRO, yytext());
            }
          case 74: break;
          case 12: 
            { return symbol(NUMERO_HEXADECIMAL, yytext());
            }
          case 75: break;
          case 13: 
            { return symbol(ANCHO, yytext());
            }
          case 76: break;
          case 14: 
            { return symbol(CLASE, yytext());
            }
          case 77: break;
          case 15: 
            { return symbol(COLOR, yytext());
            }
          case 78: break;
          case 16: 
            { return symbol(PADRE, yytext());
            }
          case 79: break;
          case 17: 
            { return symbol(SITIO, yytext());
            }
          case 80: break;
          case 18: 
            { return symbol(TEXTO, yytext());
            }
          case 81: break;
          case 19: 
            { return symbol(VALOR, yytext());
            }
          case 82: break;
          case 20: 
            { return symbol(MENU_PARAMETRO, yytext());
            }
          case 83: break;
          case 21: 
            { return symbol(ACCION_ABIERTO, yytext());
            }
          case 84: break;
          case 22: 
            { return symbol(ALTURA, yytext());
            }
          case 85: break;
          case 23: 
            { return symbol(NOMBRE, yytext());
            }
          case 86: break;
          case 24: 
            { return symbol(ORIGEN, yytext());
            }
          case 87: break;
          case 25: 
            { return symbol(PAGINA, yytext());
            }
          case 88: break;
          case 26: 
            { return symbol(TITULO, yytext());
            }
          case 89: break;
          case 27: 
            { return symbol(VIDEO_PARAMETRO, yytext());
            }
          case 90: break;
          case 28: 
            { return symbol(ACCION_CERRADO, yytext());
            }
          case 91: break;
          case 29: 
            { return symbol(IMAGEN_PARAMETRO, yytext());
            }
          case 92: break;
          case 30: 
            { return symbol(TITULO_PARAMETRO, yytext());
            }
          case 93: break;
          case 31: 
            { return symbol(ACCIONES_ABIERTO, yytext());
            }
          case 94: break;
          case 32: 
            { return symbol(ATRIBUTO_ABIERTO, yytext());
            }
          case 95: break;
          case 33: 
            { return symbol(ETIQUETA_ABIERTO, yytext());
            }
          case 96: break;
          case 34: 
            { return symbol(CENTRAR_PARAMETRO, yytext());
            }
          case 97: break;
          case 35: 
            { return symbol(PARRAFO_PARAMETRO, yytext());
            }
          case 98: break;
          case 36: 
            { return symbol(DERECHA_PARAMETRO, yytext());
            }
          case 99: break;
          case 37: 
            { return symbol(ATRIBUTOS_ABIERTO, yytext());
            }
          case 100: break;
          case 38: 
            { return symbol(ETIQUETAS, yytext());
            }
          case 101: break;
          case 39: 
            { return symbol(ETIQUETAS_ABIERTO, yytext());
            }
          case 102: break;
          case 40: 
            { return symbol(PARAMETRO_ABIERTO, yytext());
            }
          case 103: break;
          case 41: 
            { return symbol(ACCIONES_CERRADO, yytext());
            }
          case 104: break;
          case 42: 
            { return symbol(ATRIBUTO_CERRADO, yytext());
            }
          case 105: break;
          case 43: 
            { return symbol(ETIQUETA_CERRADO, yytext());
            }
          case 106: break;
          case 44: 
            { return symbol(ALINEACION, yytext());
            }
          case 107: break;
          case 45: 
            { return symbol(PARAMETROS_ABIERTO, yytext());
            }
          case 108: break;
          case 46: 
            { return symbol(ATRIBUTOS_CERRADO, yytext());
            }
          case 109: break;
          case 47: 
            { return symbol(ETIQUETAS_CERRADO, yytext());
            }
          case 110: break;
          case 48: 
            { return symbol(PARAMETRO_CERRADO, yytext());
            }
          case 111: break;
          case 49: 
            { return symbol(IZQUIERDA_PARAMETRO, yytext());
            }
          case 112: break;
          case 50: 
            { return symbol(PARAMETROS_CERRADO, yytext());
            }
          case 113: break;
          case 51: 
            { return symbol(JUSTIFICAR_PARAMETRO, yytext());
            }
          case 114: break;
          case 52: 
            { return symbol(NUEVA_PAGINA, yytext());
            }
          case 115: break;
          case 53: 
            { return symbol(BORRAR_PAGINA, yytext());
            }
          case 116: break;
          case 54: 
            { return symbol(FECHA_CREACION, yytext());
            }
          case 117: break;
          case 55: 
            { return symbol(NUEVO_SITIO_WEB, yytext());
            }
          case 118: break;
          case 56: 
            { return symbol(BORRAR_SITIO_WEB, yytext());
            }
          case 119: break;
          case 57: 
            { return symbol(MODIFICAR_PAGINA, yytext());
            }
          case 120: break;
          case 58: 
            { return symbol(USUARIO_CREACION, yytext());
            }
          case 121: break;
          case 59: 
            { return symbol(BORRAR_COMPONENTE, yytext());
            }
          case 122: break;
          case 60: 
            { return symbol(AGREGAR_COMPONENTE, yytext());
            }
          case 123: break;
          case 61: 
            { return symbol(FECHA_MODIFICACION, yytext());
            }
          case 124: break;
          case 62: 
            { return symbol(MODIFICAR_COMPONENTE, yytext());
            }
          case 125: break;
          case 63: 
            { return symbol(USUARIO_MODIFICACION, yytext());
            }
          case 126: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexer1 [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexer1 scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexer1(reader);
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
