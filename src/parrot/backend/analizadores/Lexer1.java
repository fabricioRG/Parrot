/* The following code was generated by JFlex 1.6.1 */

package parrot.backend.analizadores;

import java_cup.runtime.*;
import static parrot.backend.analizadores.sym.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>AnalizadorLexico1.lex</tt>
 */
public class Lexer1 implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\0\1\66"+
    "\1\51\1\52\10\0\1\52\1\0\1\50\1\6\11\5\2\0\1\63"+
    "\1\65\1\64\2\0\1\7\1\11\1\13\1\56\1\15\1\57\1\55"+
    "\1\60\1\17\1\62\1\4\1\21\1\23\1\25\1\27\1\31\1\33"+
    "\1\35\1\37\1\41\1\43\1\45\1\54\1\47\1\4\1\61\1\67"+
    "\1\0\1\70\1\0\1\53\1\0\1\10\1\12\1\14\1\4\1\16"+
    "\3\4\1\20\2\4\1\22\1\24\1\26\1\30\1\32\1\34\1\36"+
    "\1\40\1\42\1\44\1\46\1\4\1\4\2\4\1\0\1\71\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uff93\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\22\3\2\1\3\3"+
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\15\3"+
    "\1\14\16\3\3\0\2\15\40\3\4\0\21\3\1\16"+
    "\16\3\4\0\6\3\1\17\4\3\1\20\1\21\14\3"+
    "\1\22\1\23\1\24\2\3\1\25\1\26\4\0\3\3"+
    "\1\27\1\3\1\30\6\3\1\31\2\3\1\32\2\3"+
    "\1\33\2\3\1\34\1\35\1\3\4\0\10\3\1\36"+
    "\7\3\1\37\1\3\1\40\3\0\1\41\3\3\1\42"+
    "\1\3\1\43\4\3\2\44\6\3\4\0\4\3\1\45"+
    "\4\3\1\46\1\47\1\50\3\3\1\51\2\3\1\52"+
    "\1\53\1\54\1\0\3\3\1\55\7\3\1\56\2\3"+
    "\1\57\1\60\1\61\2\3\1\62\12\3\1\63\10\3"+
    "\1\64\7\3\1\65\20\3\1\66\6\3\1\67\5\3"+
    "\1\70\1\3\1\71\1\72\3\3\1\73\3\3\1\74"+
    "\2\3\1\75\2\3\1\76\1\77";

  private static int [] zzUnpackAction() {
    int [] result = new int[368];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\72\0\256\0\350\0\u0122\0\u015c"+
    "\0\u0196\0\u01d0\0\u020a\0\u0244\0\u027e\0\u02b8\0\u02f2\0\u032c"+
    "\0\u0366\0\u03a0\0\u03da\0\u0414\0\u044e\0\u0488\0\u04c2\0\u04fc"+
    "\0\u0536\0\u0570\0\u05aa\0\u05e4\0\u061e\0\72\0\72\0\72"+
    "\0\72\0\72\0\72\0\72\0\u0658\0\u0692\0\u06cc\0\u0706"+
    "\0\u0740\0\u077a\0\u07b4\0\u07ee\0\u0828\0\u0862\0\u089c\0\u08d6"+
    "\0\u0910\0\256\0\u094a\0\u0984\0\u09be\0\u09f8\0\u0a32\0\u0a6c"+
    "\0\u0aa6\0\u0ae0\0\u0b1a\0\u0b54\0\u0b8e\0\u0bc8\0\u0c02\0\u0c3c"+
    "\0\u0c76\0\u0cb0\0\u0cea\0\u0570\0\u0d24\0\u0d5e\0\u0d98\0\u0dd2"+
    "\0\u0e0c\0\u0e46\0\u0e80\0\u0eba\0\u0ef4\0\u0f2e\0\u0f68\0\u0fa2"+
    "\0\u0fdc\0\u1016\0\u1050\0\u108a\0\u10c4\0\u10fe\0\u1138\0\u1172"+
    "\0\u11ac\0\u11e6\0\u1220\0\u125a\0\u1294\0\u12ce\0\u1308\0\u1342"+
    "\0\u137c\0\u13b6\0\u13f0\0\u142a\0\u1464\0\u149e\0\u14d8\0\u1512"+
    "\0\u154c\0\u1586\0\u15c0\0\u15fa\0\u1634\0\u166e\0\u16a8\0\u16e2"+
    "\0\u171c\0\u1756\0\u1790\0\u17ca\0\u1804\0\u183e\0\u1878\0\u18b2"+
    "\0\u18ec\0\u1926\0\256\0\u1960\0\u199a\0\u19d4\0\u1a0e\0\u1a48"+
    "\0\u1a82\0\u1abc\0\u1af6\0\u1b30\0\u1b6a\0\u1ba4\0\u1bde\0\u1c18"+
    "\0\u1c52\0\u1c8c\0\u1cc6\0\u1d00\0\u1d3a\0\u1d74\0\u1dae\0\u1de8"+
    "\0\u1e22\0\u1e5c\0\u1e96\0\256\0\u1ed0\0\u1f0a\0\u1f44\0\u1f7e"+
    "\0\256\0\256\0\u1fb8\0\u1ff2\0\u202c\0\u2066\0\u20a0\0\u20da"+
    "\0\u2114\0\u214e\0\u2188\0\u21c2\0\u21fc\0\u2236\0\256\0\256"+
    "\0\256\0\u2270\0\u22aa\0\256\0\256\0\u22e4\0\u231e\0\u2358"+
    "\0\u2392\0\u23cc\0\u2406\0\u2440\0\u247a\0\u24b4\0\256\0\u24ee"+
    "\0\u2528\0\u2562\0\u259c\0\u25d6\0\u2610\0\256\0\u264a\0\u2684"+
    "\0\256\0\u26be\0\u26f8\0\256\0\u2732\0\u276c\0\256\0\256"+
    "\0\u27a6\0\u27e0\0\u281a\0\u2854\0\u288e\0\u28c8\0\u2902\0\u293c"+
    "\0\u2976\0\u29b0\0\u29ea\0\u2a24\0\u2a5e\0\256\0\u2a98\0\u2ad2"+
    "\0\u2b0c\0\u2b46\0\u2b80\0\u2bba\0\u2bf4\0\256\0\u2c2e\0\u2c68"+
    "\0\u2ca2\0\u2cdc\0\u2d16\0\256\0\u2d50\0\u2d8a\0\u2dc4\0\256"+
    "\0\u2dfe\0\u2e38\0\u2e72\0\u2eac\0\u2ee6\0\u2f20\0\u2f5a\0\u2f94"+
    "\0\u2fce\0\u3008\0\u3042\0\u307c\0\u30b6\0\u30f0\0\u312a\0\u3164"+
    "\0\u319e\0\u31d8\0\u3212\0\u324c\0\u3286\0\u32c0\0\256\0\u32fa"+
    "\0\u3334\0\u336e\0\u33a8\0\256\0\256\0\256\0\u33e2\0\u341c"+
    "\0\u3456\0\u3490\0\u34ca\0\u3504\0\72\0\u353e\0\u3578\0\u35b2"+
    "\0\u35ec\0\u3626\0\u3660\0\256\0\u369a\0\u36d4\0\u370e\0\u3748"+
    "\0\u3782\0\u37bc\0\u37f6\0\256\0\u3830\0\u386a\0\72\0\72"+
    "\0\u38a4\0\u38de\0\u3918\0\256\0\u3952\0\u398c\0\u39c6\0\u3a00"+
    "\0\u3a3a\0\u3a74\0\u3aae\0\u3ae8\0\u3b22\0\u3b5c\0\72\0\u3b96"+
    "\0\u3bd0\0\u3c0a\0\u3c44\0\u3c7e\0\u3cb8\0\u3cf2\0\u3d2c\0\256"+
    "\0\u3d66\0\u3da0\0\u3dda\0\u3e14\0\u3e4e\0\u3e88\0\u3ec2\0\256"+
    "\0\u3efc\0\u3f36\0\u3f70\0\u3faa\0\u3fe4\0\u401e\0\u4058\0\u4092"+
    "\0\u40cc\0\u4106\0\u4140\0\u417a\0\u41b4\0\u41ee\0\u4228\0\u4262"+
    "\0\256\0\u429c\0\u42d6\0\u4310\0\u434a\0\u4384\0\u43be\0\256"+
    "\0\u43f8\0\u4432\0\u446c\0\u44a6\0\u44e0\0\256\0\u451a\0\256"+
    "\0\256\0\u4554\0\u458e\0\u45c8\0\256\0\u4602\0\u463c\0\u4676"+
    "\0\256\0\u46b0\0\u46ea\0\256\0\u4724\0\u475e\0\256\0\256";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[368];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\1\6\1\2\1\7\1\10"+
    "\1\11\1\5\1\12\1\5\1\13\1\14\1\15\3\5"+
    "\1\16\1\5\1\17\1\20\1\21\1\5\1\22\1\23"+
    "\4\5\1\24\1\5\1\25\1\5\1\26\1\5\1\27"+
    "\1\30\1\5\1\31\1\32\2\2\2\5\1\33\1\34"+
    "\2\5\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\74\0\1\4\73\0\1\5\1\45\1\0\41\5"+
    "\2\0\11\5\14\0\2\6\67\0\1\5\1\45\1\0"+
    "\4\5\2\46\4\5\1\47\3\5\1\50\13\5\2\51"+
    "\5\5\2\0\3\5\1\52\5\5\13\0\1\5\1\45"+
    "\1\0\4\5\2\46\24\5\2\51\5\5\2\0\11\5"+
    "\13\0\1\5\1\45\1\0\20\5\1\53\20\5\2\0"+
    "\11\5\13\0\1\5\1\45\1\0\6\5\1\54\3\5"+
    "\1\55\5\5\1\56\20\5\2\0\11\5\13\0\1\5"+
    "\1\45\1\0\32\5\1\57\1\60\5\5\2\0\11\5"+
    "\13\0\1\5\1\45\1\0\32\5\2\60\5\5\2\0"+
    "\11\5\13\0\1\5\1\45\1\0\14\5\1\61\24\5"+
    "\2\0\4\5\1\62\2\5\1\63\1\5\13\0\1\5"+
    "\1\45\1\0\6\5\1\64\11\5\1\65\20\5\2\0"+
    "\11\5\13\0\1\5\1\45\1\0\20\5\2\66\12\5"+
    "\1\67\4\5\2\0\11\5\13\0\1\5\1\45\1\0"+
    "\20\5\2\66\17\5\2\0\11\5\13\0\1\5\1\45"+
    "\1\0\26\5\1\70\12\5\2\0\11\5\13\0\1\5"+
    "\1\45\1\0\1\71\1\72\37\5\2\0\11\5\13\0"+
    "\1\5\1\45\1\0\2\72\37\5\2\0\11\5\13\0"+
    "\1\5\1\45\1\0\10\5\1\73\30\5\2\0\11\5"+
    "\13\0\1\5\1\45\1\0\6\5\1\74\1\5\1\75"+
    "\30\5\2\0\11\5\13\0\1\5\1\45\1\0\30\5"+
    "\1\76\10\5\2\0\11\5\13\0\1\5\1\45\1\0"+
    "\2\77\6\5\1\100\30\5\2\0\11\5\13\0\1\5"+
    "\1\45\1\0\2\77\37\5\2\0\11\5\16\0\2\101"+
    "\4\0\2\102\12\0\2\103\43\0\1\104\1\105\1\0"+
    "\41\104\4\0\7\104\13\0\1\5\1\45\1\0\6\5"+
    "\1\106\32\5\2\0\11\5\13\0\1\5\1\45\1\0"+
    "\6\5\1\107\32\5\2\0\11\5\13\0\1\5\1\45"+
    "\1\0\34\5\1\110\4\5\2\0\11\5\13\0\1\5"+
    "\2\45\41\5\2\0\11\5\13\0\1\5\1\45\1\0"+
    "\4\5\2\111\33\5\2\0\11\5\13\0\1\5\1\45"+
    "\1\0\10\5\1\112\21\5\1\113\6\5\2\0\11\5"+
    "\13\0\1\5\1\45\1\0\4\5\1\114\34\5\2\0"+
    "\11\5\13\0\1\5\1\45\1\0\26\5\2\115\11\5"+
    "\2\0\11\5\13\0\1\5\1\45\1\0\26\5\1\116"+
    "\12\5\2\0\11\5\13\0\1\5\1\45\1\0\26\5"+
    "\1\117\12\5\2\0\11\5\13\0\1\5\1\45\1\0"+
    "\16\5\1\120\22\5\2\0\11\5\13\0\1\5\1\45"+
    "\1\0\1\121\40\5\2\0\11\5\13\0\1\5\1\45"+
    "\1\0\12\5\1\122\26\5\2\0\11\5\13\0\1\5"+
    "\1\45\1\0\10\5\1\123\1\124\27\5\2\0\11\5"+
    "\13\0\1\5\1\45\1\0\10\5\2\124\27\5\2\0"+
    "\11\5\13\0\1\5\1\45\1\0\1\125\40\5\2\0"+
    "\11\5\13\0\1\5\1\45\1\0\24\5\1\126\14\5"+
    "\2\0\11\5\13\0\1\5\1\45\1\0\16\5\1\127"+
    "\22\5\2\0\11\5\13\0\1\5\1\45\1\0\41\5"+
    "\2\0\4\5\1\130\4\5\13\0\1\5\1\45\1\0"+
    "\14\5\2\131\23\5\2\0\11\5\13\0\1\5\1\45"+
    "\1\0\6\5\1\132\32\5\2\0\11\5\13\0\1\5"+
    "\1\45\1\0\10\5\1\133\30\5\2\0\11\5\13\0"+
    "\1\5\1\45\1\0\26\5\1\134\1\135\11\5\2\0"+
    "\3\5\1\136\1\137\4\5\13\0\1\5\1\45\1\0"+
    "\26\5\2\135\11\5\2\0\11\5\13\0\1\5\1\45"+
    "\1\0\32\5\1\140\6\5\2\0\11\5\13\0\1\5"+
    "\1\45\1\0\40\5\1\141\2\0\11\5\13\0\1\5"+
    "\1\45\1\0\32\5\1\142\6\5\2\0\11\5\13\0"+
    "\1\5\1\45\1\0\34\5\1\143\4\5\2\0\11\5"+
    "\13\0\1\5\1\45\1\0\12\5\2\144\25\5\2\0"+
    "\11\5\13\0\1\5\1\45\1\0\41\5\2\0\4\5"+
    "\1\145\4\5\22\0\2\146\24\0\2\147\70\0\2\150"+
    "\36\0\2\151\65\0\1\104\2\105\41\104\4\0\7\104"+
    "\13\0\1\5\1\45\1\0\26\5\1\152\12\5\2\0"+
    "\11\5\13\0\1\5\1\45\1\0\4\5\1\153\34\5"+
    "\2\0\11\5\13\0\1\5\1\45\1\0\30\5\1\154"+
    "\10\5\2\0\11\5\13\0\1\5\1\45\1\0\10\5"+
    "\2\155\27\5\2\0\11\5\13\0\1\5\1\45\1\0"+
    "\16\5\1\156\22\5\2\0\11\5\13\0\1\5\1\45"+
    "\1\0\34\5\1\157\4\5\2\0\11\5\13\0\1\5"+
    "\1\45\1\0\41\5\2\0\6\5\1\160\2\5\13\0"+
    "\1\5\1\45\1\0\10\5\2\161\27\5\2\0\11\5"+
    "\13\0\1\5\1\45\1\0\6\5\1\162\32\5\2\0"+
    "\11\5\13\0\1\5\1\45\1\0\26\5\1\163\12\5"+
    "\2\0\11\5\13\0\1\5\1\45\1\0\32\5\1\164"+
    "\6\5\2\0\11\5\13\0\1\5\1\45\1\0\30\5"+
    "\1\165\10\5\2\0\11\5\13\0\1\5\1\45\1\0"+
    "\20\5\1\166\20\5\2\0\11\5\13\0\1\5\1\45"+
    "\1\0\24\5\1\167\1\170\13\5\2\0\11\5\13\0"+
    "\1\5\1\45\1\0\24\5\2\170\13\5\2\0\11\5"+
    "\13\0\1\5\1\45\1\0\41\5\2\0\3\5\1\171"+
    "\5\5\13\0\1\5\1\45\1\0\34\5\1\172\4\5"+
    "\2\0\11\5\13\0\1\5\1\45\1\0\34\5\1\173"+
    "\4\5\2\0\11\5\13\0\1\5\1\45\1\0\10\5"+
    "\1\174\30\5\2\0\11\5\13\0\1\5\1\45\1\0"+
    "\2\5\2\175\35\5\2\0\11\5\13\0\1\5\1\45"+
    "\1\0\36\5\1\176\2\5\2\0\11\5\13\0\1\5"+
    "\1\45\1\0\41\5\2\0\3\5\1\177\5\5\13\0"+
    "\1\5\1\45\1\0\2\200\24\5\1\201\12\5\2\0"+
    "\11\5\13\0\1\5\1\45\1\0\2\200\37\5\2\0"+
    "\11\5\13\0\1\5\1\45\1\0\10\5\1\202\30\5"+
    "\2\0\11\5\13\0\1\5\1\45\1\0\26\5\1\203"+
    "\12\5\2\0\11\5\13\0\1\5\1\45\1\0\10\5"+
    "\1\204\30\5\2\0\11\5\13\0\1\5\1\45\1\0"+
    "\32\5\1\205\6\5\2\0\11\5\13\0\1\5\1\45"+
    "\1\0\34\5\1\206\4\5\2\0\11\5\13\0\1\5"+
    "\1\45\1\0\1\207\40\5\2\0\11\5\13\0\1\5"+
    "\1\45\1\0\20\5\2\210\17\5\2\0\11\5\13\0"+
    "\1\5\1\45\1\0\6\5\1\211\32\5\2\0\11\5"+
    "\22\0\2\212\112\0\2\213\52\0\2\214\106\0\2\215"+
    "\37\0\1\5\1\45\1\0\6\5\1\216\32\5\2\0"+
    "\11\5\13\0\1\5\1\45\1\0\41\5\2\0\6\5"+
    "\1\217\2\5\13\0\1\5\1\45\1\0\32\5\1\220"+
    "\6\5\2\0\11\5\13\0\1\5\1\45\1\0\20\5"+
    "\2\221\17\5\2\0\11\5\13\0\1\5\1\45\1\0"+
    "\6\5\1\222\32\5\2\0\11\5\13\0\1\5\1\45"+
    "\1\0\26\5\1\223\12\5\2\0\11\5\13\0\1\5"+
    "\1\45\1\0\20\5\1\224\20\5\2\0\11\5\13\0"+
    "\1\5\1\45\1\0\2\5\2\225\35\5\2\0\11\5"+
    "\13\0\1\5\1\45\1\0\41\5\2\0\3\5\1\226"+
    "\5\5\13\0\1\5\1\45\1\0\1\227\40\5\2\0"+
    "\11\5\13\0\1\5\1\45\1\0\26\5\1\230\12\5"+
    "\2\0\11\5\13\0\1\5\1\45\1\0\6\5\1\231"+
    "\32\5\2\0\11\5\13\0\1\5\1\45\1\0\26\5"+
    "\1\232\12\5\2\0\11\5\13\0\1\5\1\45\1\0"+
    "\34\5\1\233\1\234\3\5\2\0\11\5\13\0\1\5"+
    "\1\45\1\0\34\5\2\234\3\5\2\0\11\5\13\0"+
    "\1\5\1\45\1\0\6\5\1\235\32\5\2\0\11\5"+
    "\13\0\1\5\1\45\1\0\10\5\1\236\30\5\2\0"+
    "\11\5\13\0\1\5\1\45\1\0\41\5\2\0\5\5"+
    "\1\237\3\5\13\0\1\5\1\45\1\0\26\5\2\240"+
    "\11\5\2\0\11\5\13\0\1\5\1\45\1\0\1\241"+
    "\17\5\1\242\20\5\2\0\11\5\13\0\1\5\1\45"+
    "\1\0\6\5\1\243\32\5\2\0\11\5\13\0\1\5"+
    "\1\45\1\0\14\5\2\244\23\5\2\0\11\5\13\0"+
    "\1\5\1\45\1\0\1\245\40\5\2\0\11\5\13\0"+
    "\1\5\1\45\1\0\16\5\1\246\22\5\2\0\11\5"+
    "\13\0\1\5\1\45\1\0\6\5\1\247\32\5\2\0"+
    "\11\5\13\0\1\5\1\45\1\0\20\5\1\250\20\5"+
    "\2\0\11\5\13\0\1\5\1\45\1\0\20\5\1\251"+
    "\20\5\2\0\11\5\13\0\1\5\1\45\1\0\12\5"+
    "\1\252\26\5\2\0\11\5\13\0\1\5\1\45\1\0"+
    "\26\5\1\253\12\5\2\0\11\5\13\0\1\5\1\45"+
    "\1\0\26\5\2\254\11\5\2\0\11\5\13\0\1\5"+
    "\1\45\1\0\20\5\1\255\20\5\2\0\11\5\26\0"+
    "\2\256\70\0\2\257\104\0\2\260\44\0\2\261\65\0"+
    "\1\5\1\45\1\0\4\5\1\262\34\5\2\0\11\5"+
    "\13\0\1\5\1\45\1\0\1\263\40\5\2\0\11\5"+
    "\13\0\1\5\1\45\1\0\10\5\1\264\30\5\2\0"+
    "\11\5\13\0\1\5\1\45\1\0\16\5\2\265\21\5"+
    "\2\0\11\5\13\0\1\5\1\45\1\0\1\266\40\5"+
    "\2\0\11\5\13\0\1\5\1\45\1\0\1\267\40\5"+
    "\2\0\11\5\13\0\1\5\1\45\1\0\34\5\2\270"+
    "\3\5\2\0\11\5\13\0\1\5\1\45\1\0\1\271"+
    "\40\5\2\0\11\5\13\0\1\5\1\45\1\0\26\5"+
    "\1\272\12\5\2\0\11\5\13\0\1\5\1\45\1\0"+
    "\1\273\40\5\2\0\11\5\13\0\1\5\1\45\1\0"+
    "\6\5\1\274\1\275\31\5\2\0\11\5\13\0\1\5"+
    "\1\45\1\0\6\5\2\275\31\5\2\0\11\5\13\0"+
    "\1\5\1\45\1\0\16\5\1\276\22\5\2\0\11\5"+
    "\13\0\1\5\1\45\1\0\6\5\1\277\32\5\2\0"+
    "\11\5\13\0\1\5\1\45\1\0\10\5\1\300\30\5"+
    "\2\0\11\5\13\0\1\5\1\45\1\0\6\5\2\301"+
    "\31\5\2\0\11\5\13\0\1\5\1\45\1\0\41\5"+
    "\2\0\1\5\1\302\7\5\13\0\1\5\1\45\1\0"+
    "\41\5\2\0\1\5\1\303\7\5\13\0\1\5\1\45"+
    "\1\0\16\5\1\304\22\5\2\0\11\5\13\0\1\5"+
    "\1\45\1\0\6\5\2\305\31\5\2\0\11\5\13\0"+
    "\1\5\1\45\1\0\41\5\2\0\5\5\1\306\3\5"+
    "\13\0\1\5\1\45\1\0\1\307\40\5\2\0\11\5"+
    "\13\0\1\5\1\45\1\0\20\5\1\310\20\5\2\0"+
    "\11\5\13\0\1\5\1\45\1\0\10\5\1\311\30\5"+
    "\2\0\11\5\36\0\2\312\52\0\2\313\122\0\2\314"+
    "\50\0\2\315\51\0\1\5\1\45\1\0\41\5\2\0"+
    "\6\5\1\316\2\5\13\0\1\5\1\45\1\0\41\5"+
    "\2\0\1\5\1\317\7\5\13\0\1\5\1\45\1\0"+
    "\41\5\2\0\5\5\1\320\3\5\13\0\1\5\1\45"+
    "\1\0\6\5\2\321\31\5\2\0\11\5\13\0\1\5"+
    "\1\45\1\0\4\5\1\322\34\5\2\0\11\5\13\0"+
    "\1\5\1\45\1\0\32\5\2\323\5\5\2\0\11\5"+
    "\13\0\1\5\1\45\1\0\26\5\1\324\12\5\2\0"+
    "\11\5\13\0\1\5\1\45\1\0\41\5\2\0\1\5"+
    "\1\325\7\5\13\0\1\5\1\45\1\0\26\5\1\326"+
    "\12\5\2\0\11\5\13\0\1\5\1\45\1\0\32\5"+
    "\1\327\1\330\5\5\2\0\11\5\13\0\1\5\1\45"+
    "\1\0\32\5\2\330\5\5\2\0\11\5\13\0\1\5"+
    "\1\45\1\0\26\5\1\331\12\5\2\0\11\5\13\0"+
    "\1\5\1\45\1\0\4\5\1\332\34\5\2\0\11\5"+
    "\13\0\1\5\1\45\1\0\22\5\1\333\16\5\2\0"+
    "\11\5\13\0\1\5\1\45\1\0\30\5\1\334\10\5"+
    "\2\0\11\5\13\0\1\5\1\45\1\0\32\5\2\335"+
    "\5\5\2\0\11\5\13\0\1\5\1\45\1\0\20\5"+
    "\1\336\20\5\2\0\11\5\13\0\1\5\1\45\1\0"+
    "\20\5\1\337\20\5\2\0\11\5\34\0\2\340\106\0"+
    "\2\341\42\0\2\342\70\0\2\343\57\0\1\5\1\45"+
    "\1\0\1\344\40\5\2\0\11\5\13\0\1\5\1\45"+
    "\1\0\4\5\1\345\7\5\1\346\24\5\2\0\11\5"+
    "\13\0\1\5\1\45\1\0\10\5\1\347\30\5\2\0"+
    "\11\5\13\0\1\5\1\45\1\0\30\5\2\350\7\5"+
    "\2\0\11\5\13\0\1\5\1\45\1\0\10\5\1\351"+
    "\30\5\2\0\11\5\13\0\1\5\1\45\1\0\20\5"+
    "\2\352\17\5\2\0\11\5\13\0\1\5\1\45\1\0"+
    "\41\5\2\0\1\5\1\353\7\5\13\0\1\5\1\45"+
    "\1\0\4\5\1\354\15\5\1\355\5\5\1\356\10\5"+
    "\2\0\11\5\13\0\1\5\1\45\1\0\1\357\1\360"+
    "\37\5\2\0\11\5\13\0\1\5\1\45\1\0\2\360"+
    "\37\5\2\0\11\5\13\0\1\5\1\45\1\0\41\5"+
    "\2\0\4\5\1\361\4\5\13\0\1\5\1\45\1\0"+
    "\1\362\40\5\2\0\11\5\13\0\1\5\1\45\1\0"+
    "\1\363\40\5\2\0\11\5\13\0\1\5\1\45\1\0"+
    "\10\5\1\364\30\5\2\0\11\5\13\0\1\5\1\45"+
    "\1\0\26\5\2\365\11\5\2\0\11\5\13\0\1\5"+
    "\1\45\1\0\41\5\2\0\1\5\1\366\7\5\24\0"+
    "\2\367\114\0\2\370\70\0\2\371\70\0\2\372\33\0"+
    "\1\5\1\45\1\0\26\5\1\373\12\5\2\0\11\5"+
    "\13\0\1\5\1\45\1\0\20\5\1\374\20\5\2\0"+
    "\11\5\13\0\1\5\1\45\1\0\4\5\1\375\34\5"+
    "\2\0\11\5\13\0\1\5\1\45\1\0\20\5\1\376"+
    "\20\5\2\0\11\5\13\0\1\5\1\45\1\0\30\5"+
    "\2\377\7\5\2\0\11\5\13\0\1\5\1\45\1\0"+
    "\4\5\1\u0100\34\5\2\0\11\5\13\0\1\5\1\45"+
    "\1\0\20\5\1\u0101\20\5\2\0\11\5\13\0\1\5"+
    "\1\45\1\0\1\u0102\40\5\2\0\11\5\13\0\1\5"+
    "\1\45\1\0\10\5\1\u0103\30\5\2\0\11\5\13\0"+
    "\1\5\1\45\1\0\30\5\1\u0104\1\u0105\7\5\2\0"+
    "\11\5\13\0\1\5\1\45\1\0\30\5\2\u0105\7\5"+
    "\2\0\11\5\13\0\1\5\1\45\1\0\1\u0106\40\5"+
    "\2\0\11\5\13\0\1\5\1\45\1\0\26\5\1\u0107"+
    "\12\5\2\0\11\5\13\0\1\5\1\45\1\0\41\5"+
    "\2\0\3\5\1\u0108\5\5\13\0\1\5\1\45\1\0"+
    "\32\5\1\u0109\6\5\2\0\11\5\13\0\1\5\1\45"+
    "\1\0\20\5\2\u010a\17\5\2\0\11\5\13\0\1\5"+
    "\1\45\1\0\4\5\1\u010b\7\5\1\u010c\24\5\2\0"+
    "\11\5\46\0\2\u010d\60\0\2\u010e\50\0\2\u010f\116\0"+
    "\2\u0110\37\0\1\5\1\45\1\0\6\5\1\u0111\32\5"+
    "\2\0\11\5\13\0\1\5\1\45\1\0\41\5\2\0"+
    "\4\5\1\u0112\4\5\13\0\1\5\1\45\1\0\1\u0113"+
    "\40\5\2\0\11\5\13\0\1\5\1\45\1\0\16\5"+
    "\1\u0114\22\5\2\0\11\5\13\0\1\5\1\45\1\0"+
    "\20\5\1\u0115\20\5\2\0\11\5\13\0\1\5\1\45"+
    "\1\0\14\5\1\u0116\24\5\2\0\11\5\13\0\1\5"+
    "\1\45\1\0\41\5\2\0\3\5\1\u0117\5\5\13\0"+
    "\1\5\1\45\1\0\32\5\1\u0118\6\5\2\0\11\5"+
    "\13\0\1\5\1\45\1\0\41\5\2\0\1\5\1\u0119"+
    "\7\5\13\0\1\5\1\45\1\0\10\5\1\u011a\30\5"+
    "\2\0\11\5\13\0\1\5\1\45\1\0\10\5\1\u011b"+
    "\30\5\2\0\11\5\13\0\1\5\1\45\1\0\30\5"+
    "\2\u011c\7\5\2\0\11\5\13\0\1\5\1\45\1\0"+
    "\26\5\1\u011d\12\5\2\0\11\5\13\0\1\5\1\45"+
    "\1\0\20\5\1\u011e\20\5\2\0\11\5\46\0\2\u011f"+
    "\70\0\2\u0120\60\0\2\u0121\45\0\1\5\1\45\1\0"+
    "\1\u0122\40\5\2\0\11\5\13\0\1\5\1\45\1\0"+
    "\10\5\1\u0123\30\5\2\0\11\5\13\0\1\5\1\45"+
    "\1\0\26\5\1\u0124\12\5\2\0\11\5\13\0\1\5"+
    "\1\45\1\0\14\5\1\u0125\24\5\2\0\11\5\13\0"+
    "\1\5\1\45\1\0\22\5\1\u0126\16\5\2\0\11\5"+
    "\13\0\1\5\1\45\1\0\10\5\1\u0127\30\5\2\0"+
    "\11\5\13\0\1\5\1\45\1\0\10\5\1\u0128\30\5"+
    "\2\0\11\5\13\0\1\5\1\45\1\0\4\5\1\u0129"+
    "\15\5\1\u012a\16\5\2\0\11\5\13\0\1\5\1\45"+
    "\1\0\16\5\1\u012b\22\5\2\0\11\5\13\0\1\5"+
    "\1\45\1\0\20\5\1\u012c\20\5\2\0\11\5\13\0"+
    "\1\5\1\45\1\0\6\5\1\u012d\32\5\2\0\11\5"+
    "\13\0\1\5\1\45\1\0\41\5\2\0\4\5\1\u012e"+
    "\4\5\46\0\2\u012f\35\0\1\5\1\45\1\0\4\5"+
    "\1\u0130\34\5\2\0\11\5\13\0\1\5\1\45\1\0"+
    "\41\5\2\0\5\5\1\u0131\3\5\13\0\1\5\1\45"+
    "\1\0\22\5\1\u0132\16\5\2\0\11\5\13\0\1\5"+
    "\1\45\1\0\20\5\1\u0133\20\5\2\0\11\5\13\0"+
    "\1\5\1\45\1\0\16\5\1\u0134\22\5\2\0\11\5"+
    "\13\0\1\5\1\45\1\0\20\5\1\u0135\20\5\2\0"+
    "\11\5\13\0\1\5\1\45\1\0\20\5\1\u0136\20\5"+
    "\2\0\11\5\13\0\1\5\1\45\1\0\1\u0137\40\5"+
    "\2\0\11\5\13\0\1\5\1\45\1\0\1\u0138\40\5"+
    "\2\0\11\5\13\0\1\5\1\45\1\0\41\5\2\0"+
    "\1\5\1\u0139\7\5\13\0\1\5\1\45\1\0\1\u013a"+
    "\40\5\2\0\11\5\13\0\1\5\1\45\1\0\10\5"+
    "\1\u013b\30\5\2\0\11\5\13\0\1\5\1\45\1\0"+
    "\10\5\1\u013c\30\5\2\0\11\5\13\0\1\5\1\45"+
    "\1\0\10\5\1\u013d\30\5\2\0\11\5\13\0\1\5"+
    "\1\45\1\0\20\5\1\u013e\20\5\2\0\11\5\13\0"+
    "\1\5\1\45\1\0\16\5\1\u013f\22\5\2\0\11\5"+
    "\13\0\1\5\1\45\1\0\1\u0140\40\5\2\0\11\5"+
    "\13\0\1\5\1\45\1\0\41\5\2\0\1\5\1\u0141"+
    "\7\5\13\0\1\5\1\45\1\0\14\5\1\u0142\24\5"+
    "\2\0\11\5\13\0\1\5\1\45\1\0\41\5\2\0"+
    "\3\5\1\u0143\5\5\13\0\1\5\1\45\1\0\41\5"+
    "\2\0\2\5\1\u0144\6\5\13\0\1\5\1\45\1\0"+
    "\4\5\1\u0145\34\5\2\0\11\5\13\0\1\5\1\45"+
    "\1\0\41\5\2\0\5\5\1\u0146\3\5\13\0\1\5"+
    "\1\45\1\0\20\5\1\u0147\20\5\2\0\11\5\13\0"+
    "\1\5\1\45\1\0\4\5\1\u0148\34\5\2\0\11\5"+
    "\13\0\1\5\1\45\1\0\16\5\1\u0149\22\5\2\0"+
    "\11\5\13\0\1\5\1\45\1\0\6\5\1\u014a\32\5"+
    "\2\0\11\5\13\0\1\5\1\45\1\0\41\5\2\0"+
    "\2\5\1\u014b\6\5\13\0\1\5\1\45\1\0\22\5"+
    "\1\u014c\16\5\2\0\11\5\13\0\1\5\1\45\1\0"+
    "\10\5\1\u014d\30\5\2\0\11\5\13\0\1\5\1\45"+
    "\1\0\6\5\1\u014e\32\5\2\0\11\5\13\0\1\5"+
    "\1\45\1\0\10\5\1\u014f\30\5\2\0\11\5\13\0"+
    "\1\5\1\45\1\0\10\5\1\u0150\30\5\2\0\11\5"+
    "\13\0\1\5\1\45\1\0\16\5\1\u0151\22\5\2\0"+
    "\11\5\13\0\1\5\1\45\1\0\1\u0152\40\5\2\0"+
    "\11\5\13\0\1\5\1\45\1\0\6\5\1\u0153\32\5"+
    "\2\0\11\5\13\0\1\5\1\45\1\0\16\5\1\u0154"+
    "\22\5\2\0\11\5\13\0\1\5\1\45\1\0\6\5"+
    "\1\u0155\32\5\2\0\11\5\13\0\1\5\1\45\1\0"+
    "\20\5\1\u0156\20\5\2\0\11\5\13\0\1\5\1\45"+
    "\1\0\16\5\1\u0157\22\5\2\0\11\5\13\0\1\5"+
    "\1\45\1\0\2\5\1\u0158\36\5\2\0\11\5\13\0"+
    "\1\5\1\45\1\0\20\5\1\u0159\20\5\2\0\11\5"+
    "\13\0\1\5\1\45\1\0\4\5\1\u015a\34\5\2\0"+
    "\11\5\13\0\1\5\1\45\1\0\4\5\1\u015b\34\5"+
    "\2\0\11\5\13\0\1\5\1\45\1\0\16\5\1\u015c"+
    "\22\5\2\0\11\5\13\0\1\5\1\45\1\0\32\5"+
    "\1\u015d\6\5\2\0\11\5\13\0\1\5\1\45\1\0"+
    "\2\5\1\u015e\36\5\2\0\11\5\13\0\1\5\1\45"+
    "\1\0\16\5\1\u015f\22\5\2\0\11\5\13\0\1\5"+
    "\1\45\1\0\1\u0160\40\5\2\0\11\5\13\0\1\5"+
    "\1\45\1\0\16\5\1\u0161\22\5\2\0\11\5\13\0"+
    "\1\5\1\45\1\0\1\u0162\40\5\2\0\11\5\13\0"+
    "\1\5\1\45\1\0\10\5\1\u0163\30\5\2\0\11\5"+
    "\13\0\1\5\1\45\1\0\32\5\1\u0164\6\5\2\0"+
    "\11\5\13\0\1\5\1\45\1\0\6\5\1\u0165\32\5"+
    "\2\0\11\5\13\0\1\5\1\45\1\0\6\5\1\u0166"+
    "\32\5\2\0\11\5\13\0\1\5\1\45\1\0\4\5"+
    "\1\u0167\34\5\2\0\11\5\13\0\1\5\1\45\1\0"+
    "\20\5\1\u0168\20\5\2\0\11\5\13\0\1\5\1\45"+
    "\1\0\6\5\1\u0169\32\5\2\0\11\5\13\0\1\5"+
    "\1\45\1\0\16\5\1\u016a\22\5\2\0\11\5\13\0"+
    "\1\5\1\45\1\0\10\5\1\u016b\30\5\2\0\11\5"+
    "\13\0\1\5\1\45\1\0\16\5\1\u016c\22\5\2\0"+
    "\11\5\13\0\1\5\1\45\1\0\32\5\1\u016d\6\5"+
    "\2\0\11\5\13\0\1\5\1\45\1\0\20\5\1\u016e"+
    "\20\5\2\0\11\5\13\0\1\5\1\45\1\0\6\5"+
    "\1\u016f\32\5\2\0\11\5\13\0\1\5\1\45\1\0"+
    "\16\5\1\u0170\22\5\2\0\11\5\7\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[18328];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\31\1\7\11\34\1\3\0"+
    "\42\1\4\0\40\1\4\0\40\1\4\0\30\1\4\0"+
    "\23\1\3\0\23\1\4\0\22\1\1\11\2\1\1\0"+
    "\16\1\2\11\16\1\1\11\101\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[368];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    StringBuilder string = new StringBuilder();
  
  private Symbol symbol(int type) {
    return new Symbol(type, yyline+1, yycolumn+1);
  }

  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline+1, yycolumn+1, value);
  }


  private void error(String message) {
    System.out.println("Error en linea line "+(yyline+1)+", columna "+(yycolumn+1)+" : "+message);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer1(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 192) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                return symbol(EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { error("Simbolo invalido <"+ yytext()+">");
            }
          case 64: break;
          case 2: 
            { /*Nothing to do*/
            }
          case 65: break;
          case 3: 
            { return symbol(IDENTIFICADOR, yytext());
            }
          case 66: break;
          case 4: 
            { return symbol(NUMERO, yytext());
            }
          case 67: break;
          case 5: 
            { return symbol(SIGNO_MENOR, yytext());
            }
          case 68: break;
          case 6: 
            { return symbol(SIGNO_MAYOR, yytext());
            }
          case 69: break;
          case 7: 
            { return symbol(SIGNO_IGUAL, yytext());
            }
          case 70: break;
          case 8: 
            { return symbol(COMILLAS, yytext());
            }
          case 71: break;
          case 9: 
            { return symbol(CORCHETE_ABIERTO, yytext());
            }
          case 72: break;
          case 10: 
            { return symbol(CORCHETE_CERRADO, yytext());
            }
          case 73: break;
          case 11: 
            { return symbol(OR, yytext());
            }
          case 74: break;
          case 12: 
            { return symbol(ID_TEXTO, yytext());
            }
          case 75: break;
          case 13: 
            { return symbol(NUMERO_HEXADECIMAL, yytext());
            }
          case 76: break;
          case 14: 
            { return symbol(MENU, yytext());
            }
          case 77: break;
          case 15: 
            { return symbol(ANCHO, yytext());
            }
          case 78: break;
          case 16: 
            { return symbol(CLASE, yytext());
            }
          case 79: break;
          case 17: 
            { return symbol(COLOR, yytext());
            }
          case 80: break;
          case 18: 
            { return symbol(PADRE, yytext());
            }
          case 81: break;
          case 19: 
            { return symbol(SITIO, yytext());
            }
          case 82: break;
          case 20: 
            { return symbol(TEXTO, yytext());
            }
          case 83: break;
          case 21: 
            { return symbol(VALOR, yytext());
            }
          case 84: break;
          case 22: 
            { return symbol(VIDEO, yytext());
            }
          case 85: break;
          case 23: 
            { return symbol(ACCION_ABIERTO, yytext());
            }
          case 86: break;
          case 24: 
            { return symbol(ALTURA, yytext());
            }
          case 87: break;
          case 25: 
            { return symbol(IMAGEN, yytext());
            }
          case 88: break;
          case 26: 
            { return symbol(NOMBRE, yytext());
            }
          case 89: break;
          case 27: 
            { return symbol(ORIGEN, yytext());
            }
          case 90: break;
          case 28: 
            { return symbol(PAGINA, yytext());
            }
          case 91: break;
          case 29: 
            { return symbol(TITULO, yytext());
            }
          case 92: break;
          case 30: 
            { return symbol(CENTRAR, yytext());
            }
          case 93: break;
          case 31: 
            { return symbol(PARRAFO, yytext());
            }
          case 94: break;
          case 32: 
            { return symbol(ACCION_CERRADO, yytext());
            }
          case 95: break;
          case 33: 
            { return symbol(DERECHA, yytext());
            }
          case 96: break;
          case 34: 
            { return symbol(ACCIONES_ABIERTO, yytext());
            }
          case 97: break;
          case 35: 
            { return symbol(ATRIBUTO_ABIERTO, yytext());
            }
          case 98: break;
          case 36: 
            { return symbol(ETIQUETA_ABIERTO, yytext());
            }
          case 99: break;
          case 37: 
            { return symbol(ATRIBUTOS_ABIERTO, yytext());
            }
          case 100: break;
          case 38: 
            { return symbol(ETIQUETAS, yytext());
            }
          case 101: break;
          case 39: 
            { return symbol(ETIQUETAS_ABIERTO, yytext());
            }
          case 102: break;
          case 40: 
            { return symbol(IZQUIERDA, yytext());
            }
          case 103: break;
          case 41: 
            { return symbol(PARAMETRO_ABIERTO, yytext());
            }
          case 104: break;
          case 42: 
            { return symbol(ACCIONES_CERRADO, yytext());
            }
          case 105: break;
          case 43: 
            { return symbol(ATRIBUTO_CERRADO, yytext());
            }
          case 106: break;
          case 44: 
            { return symbol(ETIQUETA_CERRADO, yytext());
            }
          case 107: break;
          case 45: 
            { return symbol(ALINEACION, yytext());
            }
          case 108: break;
          case 46: 
            { return symbol(PARAMETROS_ABIERTO, yytext());
            }
          case 109: break;
          case 47: 
            { return symbol(ATRIBUTOS_CERRADO, yytext());
            }
          case 110: break;
          case 48: 
            { return symbol(ETIQUETAS_CERRADO, yytext());
            }
          case 111: break;
          case 49: 
            { return symbol(PARAMETRO_CERRADO, yytext());
            }
          case 112: break;
          case 50: 
            { return symbol(JUSTIFICAR, yytext());
            }
          case 113: break;
          case 51: 
            { return symbol(PARAMETROS_CERRADO, yytext());
            }
          case 114: break;
          case 52: 
            { return symbol(NUEVA_PAGINA, yytext());
            }
          case 115: break;
          case 53: 
            { return symbol(BORRAR_PAGINA, yytext());
            }
          case 116: break;
          case 54: 
            { return symbol(FECHA_CREACION, yytext());
            }
          case 117: break;
          case 55: 
            { return symbol(NUEVO_SITIO_WEB, yytext());
            }
          case 118: break;
          case 56: 
            { return symbol(BORRAR_SITIO_WEB, yytext());
            }
          case 119: break;
          case 57: 
            { return symbol(MODIFICAR_PAGINA, yytext());
            }
          case 120: break;
          case 58: 
            { return symbol(USUARIO_CREACION, yytext());
            }
          case 121: break;
          case 59: 
            { return symbol(BORRAR_COMPONENTE, yytext());
            }
          case 122: break;
          case 60: 
            { return symbol(AGREGAR_COMPONENTE, yytext());
            }
          case 123: break;
          case 61: 
            { return symbol(FECHA_MODIFICACION, yytext());
            }
          case 124: break;
          case 62: 
            { return symbol(MODIFICAR_COMPONENTE, yytext());
            }
          case 125: break;
          case 63: 
            { return symbol(USUARIO_MODIFICACION, yytext());
            }
          case 126: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexer1 [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexer1 scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexer1(reader);
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
